<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>GuYing</title>
  <icon>https://guyinga.top/images/%E7%BD%91%E7%AB%99%E5%9B%BE%E7%89%87/logo.png</icon>
  <subtitle>「Stay Hungry.Stay Foolish.」 | 求知若饥，虚心若愚</subtitle>
  <link href="https://guyinga.top/atom.xml" rel="self"/>
  
  <link href="https://guyinga.top/"/>
  <updated>2022-11-15T07:40:08.096Z</updated>
  <id>https://guyinga.top/</id>
  
  <author>
    <name>guyingd</name>
    <email>2739218253@qq.com</email>
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>海棠机器人</title>
    <link href="https://guyinga.top/f8c543d89bff/"/>
    <id>https://guyinga.top/f8c543d89bff/</id>
    <published>2022-11-15T07:36:42.000Z</published>
    <updated>2022-11-15T07:40:08.096Z</updated>
    
    <content type="html"><![CDATA[<h3 id="什么是机器人"><a class="markdownIt-Anchor" href="#什么是机器人"></a> 什么是机器人</h3><p>QQ机器人🤖</p>]]></content>
    
    
    <summary type="html">QQ机器人</summary>
    
    
    
    <category term="折腾" scheme="https://guyinga.top/categories/%E6%8A%98%E8%85%BE/"/>
    
    
    <category term="BOT" scheme="https://guyinga.top/tags/BOT/"/>
    
    <category term="QQ" scheme="https://guyinga.top/tags/QQ/"/>
    
  </entry>
  
  <entry>
    <title>初等变换和初等矩阵</title>
    <link href="https://guyinga.top/17fd28c9475e/"/>
    <id>https://guyinga.top/17fd28c9475e/</id>
    <published>2022-09-25T16:00:00.000Z</published>
    <updated>2022-11-14T07:34:57.000Z</updated>
    
    <content type="html"><![CDATA[<p class="tag-plugin quot" type="text">高斯消元法</p><p class="tag-plugin quot" type="icon"><img class="icon prefix" src="https://bu.dusays.com/2022/10/24/63567d3e07da3.png" />简介</p><div class="tag-plugin note" ><div class="title"><strong>高斯消元法</strong></div><div class="body"><p>是线性代数规划中的一个算法，可用来为线性方程组求解。但其算法十分复杂，不常用于加减消元法，求出矩阵的秩，以及求出可逆方阵的逆矩阵。不过，如果有过百万条等式时，这个算法会十分省时。一些极大的方程组通常会用迭代法以及花式消元来解决。当用于一个矩阵时，高斯消元法会产生出一个“行梯阵式”。高斯消元法可以用在电脑中来解决数千条等式及未知数。亦有一些方法特地用来解决一些有特别排列的系数的方程组。</p></div></div><p class="tag-plugin quot" type="icon"><img class="icon prefix" src="https://bu.dusays.com/2022/10/24/63567d3e07da3.png" />原理</p><div class="tag-plugin note" color="red"><div class="title"><strong>内容</strong></div><div class="body"><p>消元法是将方程组中的一方程的未知数用含有另一未知数的代数式表示，并将其代入到另一方程中，这就消去了一未知数，得到一解；或将方程组中的一方程倍乘某个常数加到另外一方程中去，也可达到消去一未知数的目的。消元法主要用于二元一次方程组的求解。</p></div></div><div class="tag-plugin note" color="yellow"><div class="title"><strong>核心</strong></div><div class="body"><p>1.两方程互换，解不变；<br />2.一方程乘以非零数k，解不变；<br />3.一方程乘以数k加上另一方程，解不变。</p></div></div><p class="tag-plugin quot" type="icon"><img class="icon prefix" src="https://bu.dusays.com/2022/10/24/63567d3e07da3.png" />例题</p><div class="tag-plugin note" ><div class="title"><strong>线性方程组</strong></div><div class="body"><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mo fence="true">{</mo><mtable rowspacing="0.3599999999999999em" columnalign="left left" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><msub><mi>a</mi><mn>1</mn></msub><mi>x</mi><mo>+</mo><msub><mi>b</mi><mn>1</mn></msub><mi>y</mi><mo>+</mo><msub><mi>c</mi><mn>1</mn></msub><mi>z</mi><mo>=</mo><msub><mi>d</mi><mn>1</mn></msub></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><msub><mi>a</mi><mn>2</mn></msub><mi>x</mi><mo>+</mo><msub><mi>b</mi><mn>2</mn></msub><mi>y</mi><mo>+</mo><msub><mi>c</mi><mn>2</mn></msub><mi>z</mi><mo>=</mo><msub><mi>d</mi><mn>2</mn></msub></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><msub><mi>a</mi><mn>3</mn></msub><mi>x</mi><mo>+</mo><msub><mi>b</mi><mn>3</mn></msub><mi>y</mi><mo>+</mo><msub><mi>c</mi><mn>3</mn></msub><mi>z</mi><mo>=</mo><msub><mi>d</mi><mn>3</mn></msub></mrow></mstyle></mtd></mtr></mtable></mrow><annotation encoding="application/x-tex">\begin{cases}a_1x+b_1y+c_1z=d_1\\a_2x+b_2y+c_2z=d_2\\a_3x+b_3y+c_3z=d_3\\\end{cases}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:4.32em;vertical-align:-1.9099999999999997em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.35002em;"><span style="top:-2.19999em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎩</span></span></span><span style="top:-2.19499em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-2.20499em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-3.15001em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎨</span></span></span><span style="top:-4.2950099999999996em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-4.30501em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-4.60002em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎧</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.8500199999999998em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.41em;"><span style="top:-4.41em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathnormal">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathnormal" style="margin-right:0.04398em;">z</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord"><span class="mord mathnormal">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-2.97em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathnormal">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathnormal" style="margin-right:0.04398em;">z</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord"><span class="mord mathnormal">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-1.5300000000000002em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathnormal">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathnormal" style="margin-right:0.04398em;">z</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord"><span class="mord mathnormal">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.9099999999999997em;"><span></span></span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p></div></div><div class="tag-plugin note" ><div class="title"><strong>用高斯消元法求解线性方程组</strong></div><div class="body"><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mo fence="true">{</mo><mtable rowspacing="0.3599999999999999em" columnalign="left left" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><msub><mi>X</mi><mn>1</mn></msub><mo>+</mo><msub><mi>X</mi><mn>2</mn></msub><mo>+</mo><msub><mi>X</mi><mn>3</mn></msub><mo>=</mo><mn>3</mn></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mn>2</mn><msub><mi>X</mi><mn>1</mn></msub><mo>+</mo><mn>5</mn><msub><mi>X</mi><mn>2</mn></msub><mo>+</mo><mn>3</mn><msub><mi>X</mi><mn>3</mn></msub><mo>=</mo><mo>−</mo><mn>7</mn></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><msub><mi>X</mi><mn>1</mn></msub><mo>+</mo><mn>2</mn><msub><mi>X</mi><mn>2</mn></msub><mo>+</mo><mn>2</mn><msub><mi>X</mi><mn>3</mn></msub><mo>=</mo><mn>2</mn></mrow></mstyle></mtd></mtr></mtable></mrow><annotation encoding="application/x-tex">\begin{cases}X_1+X_2+X_3=3\\2X_1+5X_2+3X_3=-7\\X_1+2X_2+2X_3=2\\\end{cases}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:4.32em;vertical-align:-1.9099999999999997em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.35002em;"><span style="top:-2.19999em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎩</span></span></span><span style="top:-2.19499em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-2.20499em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-3.15001em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎨</span></span></span><span style="top:-4.2950099999999996em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-4.30501em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-4.60002em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎧</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.8500199999999998em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.41em;"><span style="top:-4.41em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord">3</span></span></span><span style="top:-2.97em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord">2</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">5</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">3</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord">−</span><span class="mord">7</span></span></span><span style="top:-1.5300000000000002em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">2</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">2</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.9099999999999997em;"><span></span></span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p></div></div><p class="tag-plugin quot" type="text">初等矩阵</p><p class="tag-plugin quot" type="icon"><img class="icon prefix" src="https://bu.dusays.com/2022/10/24/63567d3e07da3.png" />定义</p><div class="tag-plugin note" ><div class="title"><strong>初等矩阵是由单位矩阵经过一次初等变换得到的矩阵</strong></div><div class="body"></div></div><div class="tag-plugin note" ><div class="title"><strong>初等矩阵都可逆,初等矩阵的逆矩阵其实是一个同类型的初等矩阵（可看作逆变换）</strong></div><div class="body"></div></div><p class="tag-plugin quot" type="icon"><img class="icon prefix" src="https://bu.dusays.com/2022/10/24/63567d3e07da3.png" />概念</p><div class="tag-plugin note" ><div class="title"><strong>三种初等变换</strong></div><div class="body"><ul><li>交换矩阵中某两行（列）的位置；</li><li>用一个非零常数k乘以矩阵的某一行（列）；</li><li>将矩阵的某一行（列）乘以常数k后加到另一行（列）上去。</li></ul></div></div><div class="tag-plugin note" ><div class="title"><strong>三种初等变换性质</strong></div><div class="body"><p>三类初等矩阵都是可逆矩阵，即非奇异阵。<br />三类初等矩阵行列式的值是：-1,k,1</p></div></div><p class="tag-plugin quot" type="icon"><img class="icon prefix" src="https://bu.dusays.com/2022/10/24/63567d3e07da3.png" />定理</p><div class="tag-plugin note" ><div class="title"><strong>左乘一个初等方阵相当于实施行变换，右乘一个初等方阵相当于实施列变换。</strong></div><div class="body"></div></div><p class="tag-plugin quot" type="icon"><img class="icon prefix" src="https://bu.dusays.com/2022/10/24/63567d3e07da3.png" />应用</p><div class="tag-plugin note" ><div class="title"><strong>在解线性方程组中的应用</strong></div><div class="body"><p>初等行变换不影响线性方程组的解，也可用于高斯消元法，用于逐渐将系数矩阵化为标准形。初等行变换不改变矩阵的核（故不改变解集），但改变了矩阵的像。反过来，初等列变换没有改变像却改变了核。</p></div></div><div class="tag-plugin note" ><div class="title"><strong>用于求解一个矩阵的逆矩阵</strong></div><div class="body"><p>有的时候，当矩阵的阶数比较高的时候，使用其行列式的值和伴随矩阵求解其逆矩阵会产生较大的计算量。这时，通常使用将原矩阵和相同行数（也等于列数）的单位矩阵并排，再使用初等变换的方法将这个并排矩阵的左边化为单位矩阵，这时，右边的矩阵即为原矩阵的逆矩阵。</p></div></div><p class="tag-plugin quot" type="icon"><img class="icon prefix" src="https://bu.dusays.com/2022/10/24/63567d3e07da3.png" />例题</p><div class="tag-plugin note" ><div class="title"><strong>计算</strong></div><div class="body"><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi mathvariant="bold-italic">M</mi><mo>=</mo><msup><mrow><mo fence="true">(</mo><mtable rowspacing="0.15999999999999992em" columnalign="left left left" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd></mtr></mtable><mo fence="true">)</mo></mrow><mn>2022</mn></msup><mrow><mo fence="true">(</mo><mtable rowspacing="0.15999999999999992em" columnalign="left left left" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>a</mi><mn>1</mn></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>a</mi><mn>2</mn></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>a</mi><mn>3</mn></msub></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>b</mi><mn>1</mn></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>b</mi><mn>2</mn></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>b</mi><mn>3</mn></msub></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>c</mi><mn>1</mn></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>c</mi><mn>2</mn></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>c</mi><mn>3</mn></msub></mstyle></mtd></mtr></mtable><mo fence="true">)</mo></mrow><msup><mrow><mo fence="true">(</mo><mtable rowspacing="0.15999999999999992em" columnalign="left left left" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd></mtr></mtable><mo fence="true">)</mo></mrow><mn>2022</mn></msup></mrow><annotation encoding="application/x-tex">\boldsymbol{M}=\left(\begin{array}{lll}1 &amp; 0 &amp; 0 \\0 &amp; 1 &amp; 0 \\1 &amp; 0 &amp; 1\end{array}\right)^{2022}\left(\begin{array}{lll}a_1 &amp; a_2 &amp; a_3 \\b_1 &amp; b_2 &amp; b_3 \\c_1 &amp; c_2 &amp; c_3\end{array}\right)\left(\begin{array}{lll}0 &amp; 0 &amp; 1 \\0 &amp; 1 &amp; 0 \\1 &amp; 0 &amp; 0\end{array}\right)^{2022}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68611em;vertical-align:0em;"></span><span class="mord"><span class="mord"><span class="mord boldsymbol" style="margin-right:0.11424em;">M</span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:3.804048em;vertical-align:-1.55002em;"></span><span class="minner"><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05002em;"><span style="top:-2.2500000000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎝</span></span></span><span style="top:-3.2550000000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="overlay" style="height:0.3em;width:0.875em;"><svg width='0.875em' height='0.3em' style='width:0.875em' viewBox='0 0 875 300' preserveAspectRatio='xMinYMin'><path d='M291 0 H417 V300 H291 z'/></svg></span></span><span style="top:-4.05002em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎛</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55002em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span><span style="top:-3.0099999999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-1.8099999999999994em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5500000000000007em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-3.0099999999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span><span style="top:-1.8099999999999994em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5500000000000007em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-3.0099999999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-1.8099999999999994em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5500000000000007em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05002em;"><span style="top:-2.2500000000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎠</span></span></span><span style="top:-3.2550000000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="overlay" style="height:0.3em;width:0.875em;"><svg width='0.875em' height='0.3em' style='width:0.875em' viewBox='0 0 875 300' preserveAspectRatio='xMinYMin'><path d='M457 0 H583 V300 H457 z'/></svg></span></span><span style="top:-4.05002em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎞</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55002em;"><span></span></span></span></span></span></span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:2.254028em;"><span style="top:-4.5029200000000005em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mord mtight">0</span><span class="mord mtight">2</span><span class="mord mtight">2</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05002em;"><span style="top:-2.2500000000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎝</span></span></span><span style="top:-3.2550000000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="overlay" style="height:0.3em;width:0.875em;"><svg width='0.875em' height='0.3em' style='width:0.875em' viewBox='0 0 875 300' preserveAspectRatio='xMinYMin'><path d='M291 0 H417 V300 H291 z'/></svg></span></span><span style="top:-4.05002em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎛</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55002em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.0099999999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-1.8099999999999994em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5500000000000007em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.0099999999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-1.8099999999999994em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5500000000000007em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.0099999999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-1.8099999999999994em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5500000000000007em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05002em;"><span style="top:-2.2500000000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎠</span></span></span><span style="top:-3.2550000000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="overlay" style="height:0.3em;width:0.875em;"><svg width='0.875em' height='0.3em' style='width:0.875em' viewBox='0 0 875 300' preserveAspectRatio='xMinYMin'><path d='M457 0 H583 V300 H457 z'/></svg></span></span><span style="top:-4.05002em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎞</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55002em;"><span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05002em;"><span style="top:-2.2500000000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎝</span></span></span><span style="top:-3.2550000000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="overlay" style="height:0.3em;width:0.875em;"><svg width='0.875em' height='0.3em' style='width:0.875em' viewBox='0 0 875 300' preserveAspectRatio='xMinYMin'><path d='M291 0 H417 V300 H291 z'/></svg></span></span><span style="top:-4.05002em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎛</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55002em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-3.0099999999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-1.8099999999999994em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5500000000000007em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-3.0099999999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span><span style="top:-1.8099999999999994em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5500000000000007em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span><span style="top:-3.0099999999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-1.8099999999999994em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5500000000000007em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05002em;"><span style="top:-2.2500000000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎠</span></span></span><span style="top:-3.2550000000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="overlay" style="height:0.3em;width:0.875em;"><svg width='0.875em' height='0.3em' style='width:0.875em' viewBox='0 0 875 300' preserveAspectRatio='xMinYMin'><path d='M457 0 H583 V300 H457 z'/></svg></span></span><span style="top:-4.05002em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎞</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55002em;"><span></span></span></span></span></span></span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:2.254028em;"><span style="top:-4.5029200000000005em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mord mtight">0</span><span class="mord mtight">2</span><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span></span></span></p></div></div><p class="tag-plugin quot" type="text">矩阵求逆</p><p class="tag-plugin quot" type="icon"><img class="icon prefix" src="https://bu.dusays.com/2022/10/24/63567d3e07da3.png" />定义</p><div class="tag-plugin note" ><div class="title"><strong>对于方阵 A,如果存在同阶方阵 B，使得 AB = BA=I,则称A 是 可逆(非奇异）的，称B 是A 的逆矩阵，记为 $$A^{-1}$$</strong></div><div class="body"></div></div><div class="tag-plugin note" ><div class="title"><strong>设B和C都是A 的逆矩阵，则B=BI=B(AC)=(BA)C=IC=C.故如果 A 可逆,那么其逆矩阵必唯一</strong></div><div class="body"></div></div><p class="tag-plugin quot" type="icon"><img class="icon prefix" src="https://bu.dusays.com/2022/10/24/63567d3e07da3.png" />逆矩阵计算</p><div class="tag-plugin note" ><div class="title"><strong>1.用初等行变换把系数矩阵化为上三角阵(高斯消元法）</strong></div><div class="body"></div></div><div class="tag-plugin note" ><div class="title"><strong>2.用初等行变换把系数矩阵化为单位阵(高斯-若尔当消元法)</strong></div><div class="body"></div></div><div class="tag-plugin note" ><div class="title"><strong>3.每做一次初等行变换，相当于左乘一个初等矩阵P</strong></div><div class="body"><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msub><mi>P</mi><mi>s</mi></msub><mo separator="true">⋅</mo><mo separator="true">⋅</mo><mo separator="true">⋅</mo><msub><mi>P</mi><mn>2</mn></msub><msub><mi>P</mi><mn>1</mn></msub><mo stretchy="false">(</mo><mi>A</mi><mo separator="true">,</mo><mi>I</mi><mo stretchy="false">)</mo><mo>=</mo><mtext>（</mtext><mi>I</mi><mo separator="true">,</mo><msub><mi>P</mi><mi>s</mi></msub><mo separator="true">⋅</mo><mo separator="true">⋅</mo><mo separator="true">⋅</mo><msub><mi>P</mi><mn>2</mn></msub><msub><mi>P</mi><mn>1</mn></msub><mtext>）</mtext></mrow><annotation encoding="application/x-tex">P_{s}···P_{2}P_{1}( A,I) = （I,P_{s}···P_{2}P_{1}）</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">s</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">⋅</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mpunct">⋅</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mpunct">⋅</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">A</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mord cjk_fallback">（</span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">s</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">⋅</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mpunct">⋅</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mpunct">⋅</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord cjk_fallback">）</span></span></span></span></span></p></div></div><div class="tag-plugin note" ><div class="title"><strong>4.从而得到</strong></div><div class="body"><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mo stretchy="false">(</mo><msub><mi>P</mi><mi>s</mi></msub><mo separator="true">⋅</mo><mo separator="true">⋅</mo><mo separator="true">⋅</mo><msub><mi>P</mi><mn>2</mn></msub><msub><mi>P</mi><mn>1</mn></msub><mo stretchy="false">)</mo><mi>A</mi><mo>=</mo><mi>I</mi><mo>⇒</mo><msup><mi>A</mi><mrow><mo>−</mo><mn>1</mn></mrow></msup><mo>=</mo><msub><mi>P</mi><mi>s</mi></msub><mo separator="true">⋅</mo><mo separator="true">⋅</mo><mo separator="true">⋅</mo><msub><mi>P</mi><mn>2</mn></msub><msub><mi>P</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">(P_{s}···P_{2}P_{1})A = I   ⇒  A^{-1} = P_{s}···P_{2}P_{1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">s</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">⋅</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mpunct">⋅</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mpunct">⋅</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mord mathnormal">A</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">⇒</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.864108em;vertical-align:0em;"></span><span class="mord"><span class="mord mathnormal">A</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.864108em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">s</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">⋅</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mpunct">⋅</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mpunct">⋅</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></span></p></div></div><p class="tag-plugin quot" type="icon"><img class="icon prefix" src="https://bu.dusays.com/2022/10/24/63567d3e07da3.png" />例题</p><div class="tag-plugin note" ><div class="title"><strong>计算A的逆矩阵</strong></div><div class="body"><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi mathvariant="bold-italic">A</mi><mo>=</mo><mrow><mo fence="true">(</mo><mtable rowspacing="0.15999999999999992em" columnalign="left left left" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>2</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>3</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>3</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>4</mn></mstyle></mtd></mtr></mtable><mo fence="true">)</mo></mrow></mrow><annotation encoding="application/x-tex">\boldsymbol{A}=\left(\begin{array}{lll}1 &amp; 1 &amp; 1 \\1 &amp; 2 &amp; 3 \\1 &amp; 3 &amp; 4\end{array}\right)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68611em;vertical-align:0em;"></span><span class="mord"><span class="mord"><span class="mord boldsymbol">A</span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:3.60004em;vertical-align:-1.55002em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05002em;"><span style="top:-2.2500000000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎝</span></span></span><span style="top:-3.2550000000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="overlay" style="height:0.3em;width:0.875em;"><svg width='0.875em' height='0.3em' style='width:0.875em' viewBox='0 0 875 300' preserveAspectRatio='xMinYMin'><path d='M291 0 H417 V300 H291 z'/></svg></span></span><span style="top:-4.05002em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎛</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55002em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span><span style="top:-3.0099999999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span><span style="top:-1.8099999999999994em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5500000000000007em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span><span style="top:-3.0099999999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">2</span></span></span><span style="top:-1.8099999999999994em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5500000000000007em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span><span style="top:-3.0099999999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">3</span></span></span><span style="top:-1.8099999999999994em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">4</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5500000000000007em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05002em;"><span style="top:-2.2500000000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎠</span></span></span><span style="top:-3.2550000000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="overlay" style="height:0.3em;width:0.875em;"><svg width='0.875em' height='0.3em' style='width:0.875em' viewBox='0 0 875 300' preserveAspectRatio='xMinYMin'><path d='M457 0 H583 V300 H457 z'/></svg></span></span><span style="top:-4.05002em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎞</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55002em;"><span></span></span></span></span></span></span></span></span></span></span></span></p></div></div>]]></content>
    
    
    <summary type="html">高斯消元法，初等矩阵，矩阵求逆</summary>
    
    
    
    <category term="高数" scheme="https://guyinga.top/categories/%E9%AB%98%E6%95%B0/"/>
    
    
    <category term="高数" scheme="https://guyinga.top/tags/%E9%AB%98%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>YOLO算法python实现</title>
    <link href="https://guyinga.top/54381aa572aa/"/>
    <id>https://guyinga.top/54381aa572aa/</id>
    <published>2022-08-18T16:00:00.000Z</published>
    <updated>2022-11-14T07:34:57.000Z</updated>
    
    <content type="html"><![CDATA[<p></p><h3 id="yolo框架如何运作"><a class="markdownIt-Anchor" href="#yolo框架如何运作"></a> YOLO框架如何运作</h3><h4 id="yolo用于检测给定图像中的对象的处理步骤"><a class="markdownIt-Anchor" href="#yolo用于检测给定图像中的对象的处理步骤"></a> YOLO用于检测给定图像中的对象的处理步骤</h4><ul><li>首先，输入图像：</li></ul><div class="tag-plugin image"><div class="image-bg"><img src="/images/文章图片/20220819-YOLO算法python实现/005.png" fancybox="true"/></div></div><ul><li>然后，YOLO将输入图像划分为网格形式（例如3 X 3）：</li></ul><div class="tag-plugin image"><div class="image-bg"><img src="/images/文章图片/20220819-YOLO算法python实现/006.png" fancybox="true"/></div></div><ul><li>最后，对每个网格应用图像分类和定位处理，获得预测对象的边界框及其对应的类概率。</li></ul><p>整个过程是不是很清晰，下面逐一详细介绍。首先需要将标记数据传递给模型以进行训练。假设已将图像划分为大小为3 X 3的网格，且总共只有3个类别，分别是行人（c1）、汽车（c2）和摩托车（c3）。因此，对于每个单元格，标签y将是一个八维向量：</p><div class="tag-plugin image"><div class="image-bg"><img src="/images/文章图片/20220819-YOLO算法python实现/007.png" fancybox="true"/></div></div><p>其中：</p><ul><li>pc定义对象是否存在于网格中（存在的概率）；</li><li>bx、by、bh、bw指定边界框；</li><li>c1、c2、c3代表类别。如果检测对象是汽车，则c2位置处的值将为1，c1和c3处的值将为0；</li></ul><p>假设从上面的例子中选择第一个网格：</p><div class="tag-plugin image"><div class="image-bg"><img src="/images/文章图片/20220819-YOLO算法python实现/008.png" fancybox="true"/></div></div><p>由于此网格中没有对象，因此pc将为零，此网格的y标签将为：</p><div class="tag-plugin image"><div class="image-bg"><img src="/images/文章图片/20220819-YOLO算法python实现/009.png" fancybox="true"/></div></div><p>？意味着其它值是什么并不重要，因为网格中没有对象。下面举例另一个有车的网格（c2=1）：</p><div class="tag-plugin image"><div class="image-bg"><img src="/images/文章图片/20220819-YOLO算法python实现/010.png" fancybox="true"/></div></div><p>在为此网格编写y标签之前，首先要了解YOLO如何确定网格中是否存在实际对象。大图中有两个物体（两辆车），因此YOLO将取这两个物体的中心点，物体将被分配到包含这些物体中心的网格中。中心点左侧网格的y标签会是这样的：</p><div class="tag-plugin image"><div class="image-bg"><img src="/images/文章图片/20220819-YOLO算法python实现/011.png" fancybox="true"/></div></div><p>由于此网格中存在对象，因此pc将等于1，bx、by、bh、bw将相对于正在处理的特定网格单元计算。由于检测出的对象是汽车，所以c2=1，c1和c3均为0。对于9个网格中的每一个单元格，都具有八维输出向量。最终的输出形状为3X3X8。</p><p>使用上面的例子（输入图像：100X100X3，输出：3X3X8），模型将按如下方式进行训练：</p><div class="tag-plugin image"><div class="image-bg"><img src="/images/文章图片/20220819-YOLO算法python实现/012.png" fancybox="true"/></div></div><p>使用经典的CNN网络构建模型，并进行模型训练。在测试阶段，将图像传递给模型，经过一次前向传播就得到输出y。为了简单起见，使用3X3网格解释这一点，但通常在实际场景中会采用更大的网格（比如19X19）。</p><p>即使一个对象跨越多个网格，它也只会被分配到其中点所在的单个网格。可以通过增加更多网格来减少多个对象出现在同一网格单元中的几率。</p><h4 id="如何编码边界框"><a class="markdownIt-Anchor" href="#如何编码边界框"></a> 如何编码边界框</h4><p>如前所述，bx、by、bh和bw是相对于正在处理的网格单元计算而言的。下面通过一个例子来说明这一点。以包含汽车的右边网格为例：</p><div class="tag-plugin image"><div class="image-bg"><img src="/images/文章图片/20220819-YOLO算法python实现/013.png" fancybox="true"/></div></div><p>由于bx、by、bh和bw将仅相对于该网格计算。此网格的y标签将为：</p><div class="tag-plugin image"><div class="image-bg"><img src="/images/文章图片/20220819-YOLO算法python实现/014.png" fancybox="true"/></div></div><p>由于这个网格中有一个对象汽车，所以pc=1、c2=1。现在，看看如何决定bx、by、bh和bw的取值。在YOLO中，分配给所有网格的坐标都如下图所示：</p><div class="tag-plugin image"><div class="image-bg"><img src="/images/文章图片/20220819-YOLO算法python实现/015.png" fancybox="true"/></div></div><p>bx、by是对象相对于该网格的中心点的x和y坐标。在例子中，近似bx=0.4和by=0.3：</p><div class="tag-plugin image"><div class="image-bg"><img src="/images/文章图片/20220819-YOLO算法python实现/016.png" fancybox="true"/></div></div><p>bh是边界框的高度与相应单元网格的高度之比，在例子中约为0.9：bh=0.9，bw是边界框的宽度与网格单元的宽度之比，bw=0.5。此网格的y标签将为：</p><div class="tag-plugin image"><div class="image-bg"><img src="/images/文章图片/20220819-YOLO算法python实现/017.png" fancybox="true"/></div></div><p>请注意，bx和by将始终介于0和1之间，因为中心点始终位于网格内，而在边界框的尺寸大于网格尺寸的情况下，bh和bw可以大于1。</p><h4 id="非极大值抑制non-max-suppression"><a class="markdownIt-Anchor" href="#非极大值抑制non-max-suppression"></a> 非极大值抑制|Non-Max Suppression</h4><p>这里有一些思考的问题——如何判断预测的边界框是否是一个好结果（或一个坏结果）？单元格之间的交叉点，计算实际边界框和预测的边界框的并集交集。假设汽车的实际和预测边界框如下所示：</p><div class="tag-plugin image"><div class="image-bg"><img src="/images/文章图片/20220819-YOLO算法python实现/018.png" fancybox="true"/></div></div><p>其中，红色框是实际的边界框，蓝色框是预测的边界框。如何判断它是否是一个好的预测呢？IoU将计算这两个框的并集交叉区域：</p><div class="tag-plugin image"><div class="image-bg"><img src="/images/文章图片/20220819-YOLO算法python实现/019.png" fancybox="true"/></div></div><ul><li>IoU =交叉面积/联合的面积；</li><li>在本例中：IoU =黄色面积/绿色面积；</li></ul><p>如果IoU大于0.5，就可以说预测足够好。0.5是在这里采取的任意阈值，也可以根据具体问题进行更改。阈值越大，预测就越准确。</p><p>还有一种技术可以显着提高YOLO的效果——非极大值抑制。</p><p>对象检测算法最常见的问题之一是，它不是一次仅检测出一次对象，而可能获得多次检测结果。假设：</p><div class="tag-plugin image"><div class="image-bg"><img src="/images/文章图片/20220819-YOLO算法python实现/020.png" fancybox="true"/></div></div><p>上图中，汽车不止一次被识别，那么如何判定边界框呢。非极大值抑可以解决这个问题，使得每个对象只能进行一次检测。下面了解该方法的工作原理。</p><ol><li>它首先查看与每次检测相关的概率并取最大的概率。在上图中，0.9是最高概率，因此首先选择概率为0.9的方框：</li></ol><div class="tag-plugin image"><div class="image-bg"><img src="/images/文章图片/20220819-YOLO算法python实现/021.png" fancybox="true"/></div></div><ol start="2"><li>现在，它会查看图像中的所有其他框。与当前边界框较高的IoU的边界框将被抑制。因此，在示例中，0.6和0.7概率的边界框将被抑制：</li></ol><div class="tag-plugin image"><div class="image-bg"><img src="/images/文章图片/20220819-YOLO算法python实现/022.png" fancybox="true"/></div></div><ol start="3"><li>在部分边界框被抑制后，它会从概率最高的所有边界框中选择下一个，在例子中为0.8的边界框：</li></ol><div class="tag-plugin image"><div class="image-bg"><img src="/images/文章图片/20220819-YOLO算法python实现/023.png" fancybox="true"/></div></div><ol start="4"><li>再次计算与该边界框相连边界框的IoU，去掉较高IoU值的边界框：</li></ol><div class="tag-plugin image"><div class="image-bg"><img src="/images/文章图片/20220819-YOLO算法python实现/024.png" fancybox="true"/></div></div><ol start="5"><li>重复这些步骤，得到最后的边界框：</li></ol><div class="tag-plugin image"><div class="image-bg"><img src="/images/文章图片/20220819-YOLO算法python实现/025.png" fancybox="true"/></div></div><p>以上就是非极大值抑制的全部内容，总结一下关于非极大值抑制算法的要点：</p><ul><li>丢弃概率小于或等于预定阈值（例如0.5）的所有方框；</li><li>对于剩余的边界框：</li><li>选择具有最高概率的边界框并将其作为输出预测；</li><li>计算相关联的边界框的IoU值，舍去IoU大于阈值的边界框；</li><li>重复步骤2，直到所有边界框都被视为输出预测或被舍弃；</li></ul><h4 id="anchor-boxes"><a class="markdownIt-Anchor" href="#anchor-boxes"></a> Anchor Boxes</h4><p>在上述内容中，每个网格只能识别一个对象。但是如果单个网格中有多个对象呢？这就行需要了解 Anchor Boxes的概念。假设将下图按照3X3网格划分：</p><div class="tag-plugin image"><div class="image-bg"><img src="/images/文章图片/20220819-YOLO算法python实现/026.png" fancybox="true"/></div></div><p>获取对象的中心点，并根据其位置将对象分配给相应的网格。在上面的示例中，两个对象的中心点位于同一网格中：</p><div class="tag-plugin image"><div class="image-bg"><img src="/images/文章图片/20220819-YOLO算法python实现/027.png" fancybox="true"/></div></div><p>上述方法只会获得两个边界框其中的一个，但是如果使用Anchor Boxes，可能会输出两个边界框！我们该怎么做呢？首先，预先定义两种不同的形状，称为Anchor Boxes。对于每个网格将有两个输出。这里为了易于理解，这里选取两个Anchor Boxes，也可以根据实际情况增加Anchor Boxes的数量：</p><div class="tag-plugin image"><div class="image-bg"><img src="/images/文章图片/20220819-YOLO算法python实现/028.png" fancybox="true"/></div></div><ul><li>没有Anchor Boxes的YOLO输出标签如下所示：</li></ul><div class="tag-plugin image"><div class="image-bg"><img src="/images/文章图片/20220819-YOLO算法python实现/029.png" fancybox="true"/></div></div><ul><li>有Anchor Boxes的YOLO输出标签如下所示：</li></ul><div class="tag-plugin image"><div class="image-bg"><img src="/images/文章图片/20220819-YOLO算法python实现/030.png" fancybox="true"/></div></div><p>前8行属于Anchor Boxes1，其余8行属于Anchor Boxes2。基于边界框和框形状的相似性将对象分配给Anchor Boxes。由于Anchor Boxes1的形状类似于人的边界框，后者将被分配给Anchor Boxes1，并且车将被分配给Anchor Boxes2.在这种情况下的输出，将是3X3X16大小。</p><p>因此，对于每个网格，可以根据Anchor Boxes的数量检测两个或更多个对象。</p><h3 id="结合思想"><a class="markdownIt-Anchor" href="#结合思想"></a> 结合思想</h3><p>首先介绍如何训练YOLO模型，然后是新的图像进行预测。</p><h4 id="训练"><a class="markdownIt-Anchor" href="#训练"></a> 训练</h4><p>训练模型时，输入数据是由图像及其相应的y标签构成。样例如下：</p><div class="tag-plugin image"><div class="image-bg"><img src="/images/文章图片/20220819-YOLO算法python实现/031.png" fancybox="true"/></div></div><p>假设每个网格有两个Anchor Boxes，并划分为3X3网格，并且有3个不同的类别。因此，相应的y标签具有3X3X16的形状。训练过程的完成方式就是将特定形状的图像映射到对应3X3X16大小的目标。</p><h4 id="测试"><a class="markdownIt-Anchor" href="#测试"></a> 测试</h4><p>对于每个网格，模型将预测·3X3X16·大小的输出。该预测中的16个值将与训练标签的格式相同。前8个值将对应于Anchor Boxes1，其中第一个值将是该网络中对象的概率，2-5的值将是该对象的边界框坐标，最后三个值表明对象属于哪个类。以此类推。</p><p>最后，非极大值抑制方法将应用于预测框以获得每个对象的单个预测结果。</p><p>以下是YOLO算法遵循的确切维度和步骤：</p><ul><li>准备对应的图像（608,608,3）;</li><li>将图像传递给卷积神经网络（CNN），该网络返回（19,19,5,85）维输出;</li><li>输出的最后两个维度被展平以获得（19,19,425）的输出量：<ul><li>19×19网格的每个单元返回425个数字;</li><li>425=5 * 85，其中5是每个网格的Anchor Boxes数量；</li><li>85= 5+80，其中5表示（pc、bx、by、bh、bw），80是检测的类别数；</li></ul></li><li>最后，使用IoU和非极大值抑制去除重叠框；</li></ul><h3 id="yolo算法实现"><a class="markdownIt-Anchor" href="#yolo算法实现"></a> YOLO算法实现</h3><p>首先定义一些函数，这些函数将用来选择高于某个阈值的边界框，并对其应用非极大值抑制。首先，导入所需的库：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> matplotlib.pyplot <span class="keyword">import</span> imshow</span><br><span class="line"><span class="keyword">import</span> scipy.io</span><br><span class="line"><span class="keyword">import</span> scipy.misc</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> PIL</span><br><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">from</span> skimage.transform <span class="keyword">import</span> resize</span><br><span class="line"><span class="keyword">from</span> keras <span class="keyword">import</span> backend <span class="keyword">as</span> K</span><br><span class="line"><span class="keyword">from</span> keras.layers <span class="keyword">import</span> Input, Lambda, Conv2D</span><br><span class="line"><span class="keyword">from</span> keras.models <span class="keyword">import</span> load_model, Model</span><br><span class="line"><span class="keyword">from</span> yolo_utils <span class="keyword">import</span> read_classes, read_anchors, generate_colors, preprocess_image, draw_boxes, scale_boxes</span><br><span class="line"><span class="keyword">from</span> yad2k.models.keras_yolo <span class="keyword">import</span> yolo_head, yolo_boxes_to_corners, preprocess_true_boxes, yolo_loss, yolo_body</span><br></pre></td></tr></table></figure><p>然后，实现基于概率和阈值过滤边界框的函数：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">yolo_filter_boxes</span>(<span class="params">box_confidence, boxes, box_class_probs, threshold = <span class="number">.6</span></span>):</span><br><span class="line">    box_scores = box_confidence*box_class_probs</span><br><span class="line">    box_classes = K.argmax(box_scores,-<span class="number">1</span>)</span><br><span class="line">    box_class_scores = K.<span class="built_in">max</span>(box_scores,-<span class="number">1</span>)</span><br><span class="line">    filtering_mask = box_class_scores&gt;threshold</span><br><span class="line">    scores = tf.boolean_mask(box_class_scores,filtering_mask)</span><br><span class="line">    boxes = tf.boolean_mask(boxes,filtering_mask)</span><br><span class="line">    classes = tf.boolean_mask(box_classes,filtering_mask)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> scores, boxes, classes</span><br></pre></td></tr></table></figure><p>之后，实现计算IoU的函数：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">iou</span>(<span class="params">box1, box2</span>):</span><br><span class="line">    xi1 = <span class="built_in">max</span>(box1[<span class="number">0</span>],box2[<span class="number">0</span>])</span><br><span class="line">    yi1 = <span class="built_in">max</span>(box1[<span class="number">1</span>],box2[<span class="number">1</span>])</span><br><span class="line">    xi2 = <span class="built_in">min</span>(box1[<span class="number">2</span>],box2[<span class="number">2</span>])</span><br><span class="line">    yi2 = <span class="built_in">min</span>(box1[<span class="number">3</span>],box2[<span class="number">3</span>])</span><br><span class="line">    inter_area = (yi2-yi1)*(xi2-xi1)</span><br><span class="line">    box1_area = (box1[<span class="number">3</span>]-box1[<span class="number">1</span>])*(box1[<span class="number">2</span>]-box1[<span class="number">0</span>])</span><br><span class="line">    box2_area = (box2[<span class="number">3</span>]-box2[<span class="number">1</span>])*(box2[<span class="number">2</span>]-box2[<span class="number">0</span>])</span><br><span class="line">    union_area = box1_area+box2_area-inter_area</span><br><span class="line">    iou = inter_area/union_area</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> iou</span><br></pre></td></tr></table></figure><p>然后，实现非极大值抑制的函数：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">yolo_non_max_suppression</span>(<span class="params">scores, boxes, classes, max_boxes = <span class="number">10</span>, iou_threshold = <span class="number">0.5</span></span>):</span><br><span class="line">    max_boxes_tensor = K.variable(max_boxes, dtype=<span class="string">&#x27;int32&#x27;</span>)</span><br><span class="line">    K.get_session().run(tf.variables_initializer([max_boxes_tensor]))</span><br><span class="line">    nms_indices = tf.image.non_max_suppression(boxes,scores,max_boxes,iou_threshold)</span><br><span class="line">    scores = K.gather(scores,nms_indices)</span><br><span class="line">    boxes = K.gather(boxes,nms_indices)</span><br><span class="line">    classes = K.gather(classes,nms_indices)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> scores, boxes, classes</span><br></pre></td></tr></table></figure><p>随机初始化下大小为（19,19,5,85）的输出向量：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yolo_outputs = (tf.random_normal([19, 19, 5, 1], mean=1, stddev=4, seed = 1),</span><br><span class="line">                   tf.random_normal([19, 19, 5, 2], mean=1, stddev=4, seed = 1),</span><br><span class="line">                   tf.random_normal([19, 19, 5, 2], mean=1, stddev=4, seed = 1),</span><br><span class="line">                   tf.random_normal([19, 19, 5, 80], mean=1, stddev=4, seed = 1))</span><br></pre></td></tr></table></figure><p>最后，实现一个将CNN的输出作为输入并返回被抑制的边界框的函数：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">def yolo_eval(yolo_outputs, image_shape = (720., 1280.), max_boxes=10, score_threshold=.6, iou_threshold=.5):</span><br><span class="line">    box_confidence, box_xy, box_wh, box_class_probs = yolo_outputs</span><br><span class="line">    boxes = yolo_boxes_to_corners(box_xy, box_wh)</span><br><span class="line">    scores, boxes, classes = yolo_filter_boxes(box_confidence, boxes, box_class_probs, threshold = score_threshold)</span><br><span class="line">    boxes = scale_boxes(boxes, image_shape)</span><br><span class="line">    scores, boxes, classes = yolo_non_max_suppression(scores, boxes, classes, max_boxes, iou_threshold)</span><br><span class="line"></span><br><span class="line">    return scores, boxes, classes</span><br></pre></td></tr></table></figure><p>使用yolo_eval函数对之前创建的随机输出向量进行预测：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">scores, boxes, classes = yolo_eval(yolo_outputs)</span><br><span class="line">with tf.Session() as test_b:</span><br><span class="line">    print(&quot;scores[2] = &quot; + str(scores[2].eval()))</span><br><span class="line">    print(&quot;boxes[2] = &quot; + str(boxes[2].eval()))</span><br><span class="line">    print(&quot;classes[2] = &quot; + str(classes[2].eval()))</span><br></pre></td></tr></table></figure><div class="tag-plugin image"><div class="image-bg"><img src="/images/文章图片/20220819-YOLO算法python实现/032.png" fancybox="true"/></div></div><p>score表示对象在图像中的可能性，boxes返回检测到的对象的（x1，y1，x2，y2）坐标，classes表示识别对象所属的类。<br />现在，在新的图像上使用预训练的YOLO算法，看看其工作效果：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sess = K.get_session()</span><br><span class="line">class_names = read_classes(&quot;model_data/coco_classes.txt&quot;)</span><br><span class="line">anchors = read_anchors(&quot;model_data/yolo_anchors.txt&quot;)</span><br><span class="line"></span><br><span class="line">yolo_model = load_model(&quot;model_data/yolo.h5&quot;)</span><br></pre></td></tr></table></figure><p>在加载类别信息和预训练模型之后，使用上面定义的函数来获取 yolo_outputs</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yolo_outputs = yolo_head(yolo_model.output, anchors, len(class_names))</span><br></pre></td></tr></table></figure><p>之后，定义一个函数来预测边界框并在图像上标记边界框：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">def predict(sess, image_file):</span><br><span class="line">    image, image_data = preprocess_image(&quot;images/&quot; + image_file, model_image_size = (608, 608))</span><br><span class="line">    out_scores, out_boxes, out_classes = sess.run([scores, boxes, classes], feed_dict=&#123;yolo_model.input: image_data, K.learning_phase(): 0&#125;)</span><br><span class="line"></span><br><span class="line">    print(&#x27;Found &#123;&#125; boxes for &#123;&#125;&#x27;.format(len(out_boxes), image_file))</span><br><span class="line"></span><br><span class="line">    # Generate colors for drawing bounding boxes.</span><br><span class="line">    colors = generate_colors(class_names)</span><br><span class="line"></span><br><span class="line">    # Draw bounding boxes on the image file</span><br><span class="line">    draw_boxes(image, out_scores, out_boxes, out_classes, class_names, colors)</span><br><span class="line"></span><br><span class="line">    # Save the predicted bounding box on the image</span><br><span class="line">    image.save(os.path.join(&quot;out&quot;, image_file), quality=90)</span><br><span class="line"></span><br><span class="line">    # Display the results in the notebook</span><br><span class="line">    output_image = scipy.misc.imread(os.path.join(&quot;out&quot;, image_file))</span><br><span class="line"></span><br><span class="line">    plt.figure(figsize=(12,12))</span><br><span class="line">    imshow(output_image)</span><br><span class="line"></span><br><span class="line">    return out_scores, out_boxes, out_classes</span><br></pre></td></tr></table></figure><p>接下来，将使用预测函数读取图像并进行预测：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">img = plt.imread(&#x27;images/img.jpg&#x27;)</span><br><span class="line">image_shape = float(img.shape[0]), float(img.shape[1])</span><br><span class="line">scores, boxes, classes = yolo_eval(yolo_outputs, image_shape)</span><br></pre></td></tr></table></figure><p>最后，输出预测结果：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">out_scores, out_boxes, out_classes = predict(sess, &quot;img.jpg&quot;)</span><br></pre></td></tr></table></figure><div class="tag-plugin image"><div class="image-bg"><img src="/images/文章图片/20220819-YOLO算法python实现/033.png" fancybox="true"/></div></div><h4 id="yolo算法darknet的官网"><a class="markdownIt-Anchor" href="#yolo算法darknet的官网"></a> YOLO算法darknet的官网</h4><p><a href="https://pjreddie.com/darknet/yolo/">https://pjreddie.com/darknet/yolo/</a></p>]]></content>
    
    
    <summary type="html">介绍其基本原理及实现细节</summary>
    
    
    
    <category term="深度学习" scheme="https://guyinga.top/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="深度学习" scheme="https://guyinga.top/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>YOLO算法简介</title>
    <link href="https://guyinga.top/84b657751b84/"/>
    <id>https://guyinga.top/84b657751b84/</id>
    <published>2022-08-17T16:00:00.000Z</published>
    <updated>2022-11-14T07:34:57.000Z</updated>
    
    <content type="html"><![CDATA[<p></p><h3 id="为什么使用yolo算法"><a class="markdownIt-Anchor" href="#为什么使用yolo算法"></a> 为什么使用YOLO算法</h3><p>深度学习相关的目标检测方法大致可以分为两派：<br />1.基于区域提名的：如R-CNN，SPP-Net，Fast R-CNN，Faster R-CNN，R-FCN；<br />2.端到端（End-to-End）：无需区域提名的，如YOLO，SSD</p><p>目前来说，RCNN系列基于区域提名的算法面临一个问题，不是端到端的模型，几个构件拼凑在一起组成整个检测系统，操作起来比较复杂耗时较长，但端到端的YOLO算法速度上优势明显，该方法操作简便且仿真速度快，效果也不差。</p><p>YOLO非常快。由于检测问题是一个回归问题，所以不需要复杂的管道。它比“R-CNN”快1000倍，比“Fast R-CNN”快100倍。它能够处理实时视频流，延迟小于25毫秒。它的精度是以前实时系统的两倍多。同样重要的是，YOLO遵循的是“端到端深度学习”的实践。</p><h3 id="yolo算法是什么"><a class="markdownIt-Anchor" href="#yolo算法是什么"></a> YOLO算法是什么</h3><p>YOLO算法（You Only Look Once）与RCNN系列算法不一样，是以不同的方式处理对象检测。它将整个图像放在一个实例中，并预测这些框的边界框坐标和及所属类别概率。使用YOLO算法最大优的点是速度极快，每秒可处理45帧，也能够理解一般的对象表示。所以YOLO算法在自动驾驶汽车等前沿技术中使用的实时对象检测中很受欢迎。</p><h3 id="实时的重要性"><a class="markdownIt-Anchor" href="#实时的重要性"></a> 实时的重要性</h3><p>人们看到图像以后，可以立即识别其中的对象、它们的位置和相对位置。这使得我们能够在几乎无意识的情况下完成复杂的任务，比如开车。因此，对汽车进行自动驾驶训练需要类似水平的反应能力和准确性。在其最基本的形式中，这样的系统必须能够分析实时视频中的道路，并能够在继续确定路径之前检测各种类型的对象及其在现实世界中的位置，所有这些都必须是实时的。</p><p>先前的检测系统使用分类器对测试图像的不同切片进行评估。例如，Deformable Parts Model (DPM)涉及到在图像中均匀间隔的位置上滑动窗口并在这些部件上运行分类器。R-CNN(Region-based Convolutional Neural Networks)是另一种模型，它运行一种分割算法将一幅图像分割成一个个小块，然后在这些小块上运行一个分类器。但是，速度慢、优化困难一直困扰着这种YOLO之前的系统。</p><h3 id="yolo算法简介"><a class="markdownIt-Anchor" href="#yolo算法简介"></a> YOLO算法简介</h3><p>YOLO将对象检测重新定义为一个回归问题。它将单个卷积神经网络(CNN)应用于整个图像，将图像分成网格，并预测每个网格的类概率和边界框。例如，以一个100x100的图像为例。我们把它分成网格，比如7x7。</p><div class="tag-plugin image"><div class="image-bg"><img src="/images/文章图片/20220818-YOLO算法简介/002.jpeg" fancybox="true"/></div></div><p>然后，对于每个网格，网络都会预测一个边界框和与每个类别（汽车，行人，交通信号灯等）相对应的概率。</p><div class="tag-plugin image"><div class="image-bg"><img src="/images/文章图片/20220818-YOLO算法简介/003.jpeg" fancybox="true"/></div></div><p>每个边界框可以使用四个描述符进行描述：</p><ol><li>边界框的中心</li><li>高度</li><li>宽度</li><li>值映射到对象所属的类</li></ol><p>此外，该算法还可以预测边界框中存在对象的概率。如果一个对象的中心落在一个网格单元中，则该网格单元负责检测该对象。每个网格中将有多个边界框。在训练时，我们希望每个对象只有一个边界框。因此，我们根据哪个Box与ground truth box的重叠度最高，从而分配一个Box来负责预测对象。</p><p>最后，我们对每个类的对象应用一个称为“非最大抑制（Non Max Suppression）”的方法来过滤出“置信度”小于阈值的边界框。这为我们提供了图像预测。</p><div class="tag-plugin image"><div class="image-bg"><img src="/images/文章图片/20220818-YOLO算法简介/004.jpeg" fancybox="true"/></div></div>]]></content>
    
    
    <summary type="html">计算机视觉</summary>
    
    
    
    <category term="深度学习" scheme="https://guyinga.top/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="深度学习" scheme="https://guyinga.top/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>基于深度学习的目标检测</title>
    <link href="https://guyinga.top/f40f194d9411/"/>
    <id>https://guyinga.top/f40f194d9411/</id>
    <published>2022-08-11T16:00:00.000Z</published>
    <updated>2022-11-14T07:34:57.000Z</updated>
    
    <content type="html"><![CDATA[<p></p><h3 id="基于深度学习的目标检测"><a class="markdownIt-Anchor" href="#基于深度学习的目标检测"></a> 基于深度学习的目标检测</h3><p>普通的深度学习监督算法主要用来做分类，分类的目标是要识别出图中所示是一只猫。而在ILSVRC（ImageNet Large Scale Visual Recognition Challenge）竞赛以及实际的应用中，还包括目标定位和目标检测等任务。其中目标定位不仅仅要识别出来是什么物体（即分类），而且还要预测物体的位置，位置一般用边框（bounding box）标记。而目标检测实质是多目标的定位，即要在图片中定位多个目标物体，包括分类和定位。</p><p>简单来说，分类，定位和检测的区别如下：<br />1.分类：是什么？<br />2.定位：在哪里？是什么？（单个目标）<br />3.检测：在哪里？分别是什么？（多个目标）</p><p>目标检测对于人类来说并不困难，通过对图片中不同颜色模块的感知很容易定位并分类出其中的目标物体，但对于计算机来说，面对的是RGB像素矩阵，很难从图像中直接得到“狗”和“猫”这样的抽象概念并定位其位置，再加上有时候多个物体和杂乱的背景混杂在一起，使得目标检测更加困难。在传统视觉领域，目标检测就是一个非常热门的研究方向，一些特定目标的检测，比如人脸检测和行人检测已经有非常成熟的技术了。普通的目标检测也有过很多的尝试，但是效果总是差强人意。</p><p>传统的目标检测一般使用滑动窗口的框架，主要包括三个步骤：<br />1.利用不同尺寸的滑动窗口框住图中的某一部分作为候选区域；<br />2.提取候选区域相关的视觉特征。比如人脸检测常用的Harr特征；行人检测和普通目标检测常用的HOG特征等；<br />3.利用分类器进行识别，比如常用的SVM模型</p><p>传统的目标检测中，多尺度形变部件模型DPM（Deformable Part Model）是出类拔萃的，连续获得VOC（Visual Object Class）2007到2009的检测冠军，DPM把物体看成多个组成部分（比如人脸的鼻子、嘴巴等），用部件间的关系来描述物体，这个特性非常符合自然界很多物体的非刚体特征。DPM可以看做是HOG+SVM的扩展，很好的继承了两者的优势。在人脸检测、行人检测等任务上取得了不错的效果，但是DPM相对复杂，检测速度也很慢，从而也出现了很多改进的方法。正当大家热火朝天的改进DPM性能的时候，基于深度学习的目标检测横空出世，迅速盖过了DPM的风头，很多之前研究传统目标检测算法的研究者也开始转向深度学习。</p><p>基于深度学习的目标检测发展起来以后，其效果也一直难以突破。2013年R-CNN诞生了，VOC2007测试集的mAP被提升至48%,2014年通过修改网络结构又飙升至66%，同时ILSVRC2013测试集的mAP也被提升至31.4%</p><p>R-CNN是Region-based Convolutional Neural Networks的缩写，中文翻译是基于区域的卷积神经网络，是一种结合区域提名（Region Proposal）和卷积神经网络（CNN）的目标检测方法。R-CNN是第一个真正可以工业级应用的解决方案，这也和深度学习本身的发展类似，神经网络、卷积网络都不是什么新概念，但在本世纪突然真正变得可行，而一旦可行之后再迅猛发展也不足为奇了。</p><p>R-CNN这个领域目前研究非常活跃，先后出现了R-CNN，SPP-Net，Fast R-CNN，Faster R-CNN，R-FCN，YOLO，SSD等研究。这些创新工作其实很多时候是把一些传统视觉领域的方法和深度学习结合起来了，比如选择性搜索（Selective Search）和图像金字塔（Pyramid）等</p><p>深度学习相关的目标检测方法大致可以分为两派：<br />1.基于区域提名的：如R-CNN，SPP-Net，Fast R-CNN，Faster R-CNN，R-FCN；<br />2.端到端（End-to-End）：无需区域提名的，如YOLO，SSD</p><p>目前来说，基于区域提名的方法依然占据上风，但端到端的方法速度上优势明显，后续的发展拭目以待。</p><h3 id="11基于区域提名的方法"><a class="markdownIt-Anchor" href="#11基于区域提名的方法"></a> 1.1基于区域提名的方法</h3><p>本小节主要介绍区域提名的方法，包括R-CNN，SPP-Net，Fast R-CNN，Faster R-CNN，R-FCN</p><h4 id="111-r-cnn"><a class="markdownIt-Anchor" href="#111-r-cnn"></a> 1.1.1 R-CNN</h4><p>如前面所述，早期的目标检测，大都使用滑动窗口的方式进行窗口提名，这种方式本质是穷举法，R-CNN采用的是Selective Search<br />以下是R-CNN的主要步骤：</p><p>1.区域提名：通过Selective Search从原始图片提取2000个左右区域候选框；<br />2.区域大小归一化：把所有候选框缩放成固定大小（原文采用227×227）；<br />3.特征提取：通过CNN网络，提取特征；<br />4.分类与回归：在特征层的基础上添加两个全连接层，再用SVM分类来做识别，用线性回归来微调边框位置和大小，其中每个类别单独训练一个边框回归器。</p><p>事实上，R-CNN有许多缺点：<br />1.重复计算：R-CNN虽然不再是穷举，但依然有两千个左右的候选框，这些候选框都需要进行CNN操作，计算量依然很大，其中有不少其实是重复计算；<br />2.SVM模型：而且是线性模型，在标注数据不缺的时候显然不是最好的选择；<br />3.训练测试分为多步：区域提名，特征提取，分类，回归都是断开的训练过程，中间数据还需要单独保存；<br />4.训练的空间和时间代价很高：卷积出来的特征需要先存在硬盘上，这些特征需要几百G的存储空间；<br />5.慢：前面的缺点导致R-CNN出奇的慢，GPU处理一张图片需要13秒，CPU上则需要53秒。</p><h4 id="112-spp-net"><a class="markdownIt-Anchor" href="#112-spp-net"></a> 1.1.2 SPP-Net</h4><p>SPP-Net,其主要思想是去掉原始图像上的crop/warp等操作，换成了在卷积特征上的空间金字塔池化层（Spatial Pyramid Pooling，SPP），为何要引入SPP层，主要原因是CNN的全连接要求输入图片是大小一致的，而实际的输入图片往往大小不一，如果直接缩放到统一尺寸，很有可能有的物体会充满整个图片，而有的物体可能只能再到图片的一角。传统的解决方案是进行不同位置的裁剪，但这些裁剪技术都可能会导致一些问题的出现，比如crop会导致物体不全，warp导致物体被拉伸后变形严重，SPP就是为了解决这个问题的。SPP对整图提取固定维度的特征，再把图片均分成4份，每份提取相同的维度特征，再把图片均匀分成16份，以此类推，可以看出，无论图片大小如何，提取出来的维度数据都是一致的，这样就可以统一送至全连接层了。SPP的思想在后来的R-CNN模型中也被广泛用到。</p><p>SPP-Net网络，其实实质是在最后一层卷积层后加了一个SPP层，将维度不一的卷积特征转换为维度一致的全连接输入。</p><p>SPP-Net做目标检测的主要步骤为：<br />1.区域提名：用Selective Search从原图中生成2000个左右的候选窗口；<br />2.区域大小缩放：SPP-Net不再做区域大小归一化，而是缩放到min(w,h)=s,即统一长宽的最短边长度，s选自{480,576,688,864,1200}中的一个，选择的标准是使得缩放后的候选框大小与224×224最接近；<br />3.特征提取：利用SPP-Net网络结构提取特征<br />4.分类与回归：类似R-CNN，利用SVM基于上面的特征训练分类器模型，用边框回归来微调候选框的位置。</p><p>SPP-Net解决了R-CNN区域提名时crop/warp带来的偏差问题，提出了SPP层，使得输入的候选框可大可小，但其他方面依然和R-CNN一样，因而依然存在不少问题，这就有了后面的Fast R-CNN</p><h4 id="113-fast-r-cnn"><a class="markdownIt-Anchor" href="#113-fast-r-cnn"></a> 1.1.3 Fast R-CNN</h4><p>Fast R-CNN是要解决R-CNN和SPP-Net两千个左右候选框带来的重复计算问题，其主要思想为：<br />1.使用一个简化的SPP层——RoI（Region of Interesting）Pooling层，操作与SPP类似<br />2.训练和测试是不再分多步：不在需要额外的硬盘来存储中间层的特征，梯度能够通过RoI Pooling层直接传播；此外，分类和回归用Multi-task的方式一起进行；<br />3.SVD：使用SVD分解全连接层的参数矩阵，压缩为两个规模小很多的全连接层</p><p>Fast R-CNN的主要步骤如下：<br />1.特征提取：以整张图片为输入利用CNN得到图片的特征层；<br />2.区域提名：通过Selective Search等方法从原始图片提取区域候选框，并把这些候选框一一投影到最后的特征层；<br />3.区域归一化：针对特征曾上的每个区域候选框进行RoI Pooling操作，得到固定大小的特征表示；<br />4.分类和回归：然后通过两个全连接层，分别用softmax多分类做目标识别，用回归模型进行边框位置与大小的精确定位和微调。</p><p>Fast R-CNN比R-CNN的训练速度（大模型）快8,8倍，测试时间快213倍，比SPP-Net训练速度快2.6倍，测试速度快10倍左右。</p><h4 id="114-faster-r-cnn"><a class="markdownIt-Anchor" href="#114-faster-r-cnn"></a> 1.1.4 Faster R-CNN</h4><p>Fast R-CNN使用Selective Serach来进行区域提名，速度依然不够快。Faster R-CNN则直接利用RPN（Region Proposal Networks）网络来计算候选框。RPN以一张任意大小的图片为输入，输出一批矩形区域提名，每个区域对应一个目标分数和位置信息。</p><p>Faster R-CNN的主要步骤如下：<br />1.特征提取：同Fast R-CNN，以整张图片为输入，利用CNN得到图片的特征层；<br />2.区域提名：在最终的卷积特征层上利用k个不同的矩形框（Anchor Box）进行提名，k一般取9；<br />3.分类和回归：对每个Anchor Box对应的区域进行object/non-object二分类，并用k个回归模型（各自对应不同的Anchor Box）微调候选框位置与大小，最后进行目标分类。</p><p>总之，Faster R-CNN抛弃了Selective Search，引入了RPN网络，使得区域提名，分类，回归一起共用卷积特征，从而得到了进一步的加速。但是Faster R-CNN需要对两万个Anchor Box先判断是否是目标（目标判定），然后再进行目标识别，分成两步。</p><h4 id="115-r-fcn"><a class="markdownIt-Anchor" href="#115-r-fcn"></a> 1.1.5 R-FCN</h4><p>前面的目标检测方法都可以细分为两个子网络：</p><p>1.共享的全卷积网络；<br />2.不共享计算的RoI相关的子网络（比如全连接网络）</p><p>R-FCN则是将最后的全连接层之类换为了一个位置敏感的卷积网络，从而让所有的计算都可以共享。具体来说，先把每个区域提名划分为K×K个网格，比如R-FCN原文中k的取值为3，则对应的九个网格分别表示：左上top-left，上中top-center，右上top-right，…，右下bottom-right，对应的九宫格，每个Grid都有对应的编码，但预测时候会有C+1个输出，C表示类别数目，+1是因为有背景类别，全部的输出通道数量为K^2 * (C+1).需要注意的是九宫格，但是Pooling时候只有一个起作用，比如bottom-right层只有右下角的小块起作用，那么问题来了，这一层的其他8个框有什么作用呢？答案是她们可以作为其他RoI（偏左或者偏上的RoI）的右下角。</p><p>R-FCN的步骤：</p><p>1.区域提名：使用RPN（Region Proposal Network，区域提名网络），RPN本身是全卷积网络结构；<br />2.分类和回归：利用和RPN共享的特征进行分类。当做bbox回归时，则将c设置为4</p><h3 id="12-端到端的方法"><a class="markdownIt-Anchor" href="#12-端到端的方法"></a> 1.2 端到端的方法</h3><p>本节介绍端到端（End-to-End）的目标检测方法，这些方法无需区域提名，包括YOLO和SSD</p><h4 id="121-yolo"><a class="markdownIt-Anchor" href="#121-yolo"></a> 1.2.1 YOLO</h4><p>YOLO的全拼是You Only Look Once，顾名思义就是只看一次，进一步把目标判定和目标识别合二为一，所以识别的性能有了很大的提升，达到每秒45帧，而在快速版的YOLO（Fast YOLO，卷积层更少）中，可以达到每秒155帧。</p><p>针对一张图片，YOLO的处理步骤为：<br />1.把输入图片缩放到448*448大小<br />2.运行卷积网络；<br />3.对模型置信度卡阈值，得到目标位置和类别</p><p>YOLO将448<em>448大小的图切成S</em>S的网格，目标中心点所在的搁置负责该目标的相关检测，每个网络预测B个边框及其置信度，以及C种类别的概率。YOLO中S = 7 ，B = 2，C取决于数据集中物体类别数量，比如VOC数据集就是C = 20，对于VOC数据集来说，YOLO就是把图片统一缩放到448<em>448，然后每张图片平均划分为7</em>7=49个小格子，每个格子预测2个矩形框及其置信度，以及20中类别的概率。</p><p>YOLO简化了真个目标检测的流程，速度提升也很大，但是YOLO还是有不少可以改进的地方，比如S*S的网格就是一个比较启发式的策略，如果两个小目标同时落入一个格子中，模型也只能预测一个；另一个问题是Loss函数对不同大小的bbox未做区分。</p><h4 id="122-ssd"><a class="markdownIt-Anchor" href="#122-ssd"></a> 1.2.2 SSD</h4><p>SSD的全拼是Single Shot MultiBox Detector，冲着YOLO的缺点来的。SSD的网络分为两部分，前面是用于图像分类的标准网络，后面的网络是用于检测的多尺度特征映射层，从而达到检测不同大小的目标，SSD在保持YOLO高速的同时效果也提升了很多，主要是借鉴了Faster R-CNN中的Anchor机制，同时使用了多尺度。但是从原理依然可以看出，Default Box的新装以及网格大小是事先固定的，那么对特定图片小目标的提取会不够好。</p><h3 id="13-总结"><a class="markdownIt-Anchor" href="#13-总结"></a> 1.3 总结</h3><p>基于深度学习的目标检测总体上分为两派：<br />1.基于区域提名的R-CNN系列；<br />2.无需区域提名的YOLO，SSD系列</p>]]></content>
    
    
    <summary type="html">计算机视觉</summary>
    
    
    
    <category term="深度学习" scheme="https://guyinga.top/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="深度学习" scheme="https://guyinga.top/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>C++程序设计简答题（二）</title>
    <link href="https://guyinga.top/dddeac14c9ae/"/>
    <id>https://guyinga.top/dddeac14c9ae/</id>
    <published>2022-03-15T16:00:00.000Z</published>
    <updated>2022-11-14T07:34:57.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="1-比较值传递和引用传递的相同点和不同点"><a class="markdownIt-Anchor" href="#1-比较值传递和引用传递的相同点和不同点"></a> 1. 比较值传递和引用传递的相同点和不同点。</h4><p>值传递是指当发生函数调用时，给形参分配内存空间，并用实参来初始化形参（直接将 实参的值传递给形参）。这一过程是参数值的单向传递过程，一旦形参获得了值便与实参脱 离关系，此后无论形参发生了怎样的改变，都不会影响到实参。<br />引用传递将引用作为形参，在执行主调函数中的调用语句时，系统自动用实参来初始化 形参。这样形参就成为实参的一个别名，对形参的任何操作也就直接作用于实参。</p><h4 id="2-什么叫内联函数它有哪些特点"><a class="markdownIt-Anchor" href="#2-什么叫内联函数它有哪些特点"></a> 2 什么叫内联函数?它有哪些特点？</h4><p>定义时使用关键字 inline 的函数叫做内联函数；编译器在编译时在调用处用函数体进行替换,节省了参数传递、控制转移等开销；<br />内联函数体内不能有循环语句和 switch 语句；<br />内联函数的定义必须出现在内联函数第一次被调用之前；对内联函数不能进行异常接口声明；</p><h4 id="3-什么叫复制构造函数复制构造函数何时被调用"><a class="markdownIt-Anchor" href="#3-什么叫复制构造函数复制构造函数何时被调用"></a> 3 什么叫复制构造函数？复制构造函数何时被调用？</h4><p>复制构造函数是一种特殊的构造函数，具有一般构造函数的所有特性，其形参是本类的 对象的引用 (const T &amp;)。其作用是使用一个已经存在的对象（由复制构造函数的参数指定），去初始化同类的一个新对象。<br />（1） 当用类的一个对象去初始化该类的另一个对象时；<br />（2） 如果函数的形参是类的对象，调用函数时进行形参和实参结合时；<br />（3） 如果函数的返回值是类的对象，函数执行完成返回调用者时。</p><h4 id="4-复制构造函数与赋值运算符有何不同"><a class="markdownIt-Anchor" href="#4-复制构造函数与赋值运算符有何不同"></a> 4 复制构造函数与赋值运算符（=）有何不同？</h4><p>从概念上区分：复制构造函数是构造函数，而赋值操作符属于操作符重载范畴，它通常 是类的成员函数 从原型上来区分：<br />复制构造函数原型 ClassType(const ClassType &amp;);无返回值；<br />赋值操作符原型 ClassType&amp; operator=(const ClassType &amp;);返回值为 ClassType 的引用，便于连续赋 值操作 从使用的场合来区分：复制构造函数用于产生对象，它用于以下几个地方：函数参数为 类的值类型时、函数返回值为类类型时以及初始化语句</p><h4 id="5-什么叫作用域有哪几种类型的作用域"><a class="markdownIt-Anchor" href="#5-什么叫作用域有哪几种类型的作用域"></a> 5 什么叫作用域？有哪几种类型的作用域？</h4><p>作用域讨论的是标识符的有效范围，作用域是一个标识符在程序正文中有效的区域。 C++的作用域分为：函数原型作用域、函数作用域、文件作用域(全局作用域)、块作用 域（局部作用域）、类作用域和名字空间作用域。</p><h4 id="6-什么叫做可见性可见性的一般规则是什么"><a class="markdownIt-Anchor" href="#6-什么叫做可见性可见性的一般规则是什么"></a> 6 什么叫做可见性？可见性的一般规则是什么？</h4><p>可见性是标识符是否可以引用的问题； 可见性的一般规则是：标识符要声明在前，引用在后，在同一作用域中，不能声明同名 的标识符。对于在不同的作用域声明的标识符，遵循的原则是：若有两个或多个具有包含关 系的作用域，外层声明的标识符如果在内层没有声明同名标识符时仍可见，如果内层声明了 同名标识符则外层标识符不可见。</p><h4 id="7-什么叫静态数据成员他有何特点"><a class="markdownIt-Anchor" href="#7-什么叫静态数据成员他有何特点"></a> 7 什么叫静态数据成员？他有何特点？</h4><p>类的静态数据成员是类的数据成员的一种特例，采用 static 关键字来声明。对于类的普<br />通数据成员，每一个类的对象都拥有一个拷贝，就是说每一个对象的同名数据成员可以分别存储不同的值，这也是保证对象拥有区别于其他对象的特征的需要，但是静态数据成员，每 个类只要一个拷贝，由所有该类的对象共同维护和使用，这个共同维护，使用也就实现了同一类的不同对象之间的数据共享。</p><h4 id="8-什么叫静态函数成员他有何特点"><a class="markdownIt-Anchor" href="#8-什么叫静态函数成员他有何特点"></a> 8 什么叫静态函数成员？他有何特点？</h4><p>使用 static 关键字声明的函数成员是静态的，静态函数成员属于整个类，被同一个类的 所有对象共同维护，为这些所有对象共享。<br />静态成员函数具有以下两个方面的好处：<br />一是由于静态成员函数只能直接访问同一个类的静态数据成员，可以保证不会对该类的其余数据成员造成负面影响；<br />二是同一个类只维护一个静态函数成员的拷贝，节约了系统的开销，提高 程序的运行效率。</p><h4 id="9-什么叫友元函数什么叫友元类"><a class="markdownIt-Anchor" href="#9-什么叫友元函数什么叫友元类"></a> 9 什么叫友元函数？什么叫友元类？</h4><p>友元函数是使用关键字 friend 关键字声明的函数，它可以访问相应类的保护成员和私 有成员。友元类是使用 friend 关键字声明的类，它的所有成员函数都是相应类的友元函数。<br />友元不可继承，没有传递性。</p><h4 id="10-在函数内部定义的普通局部变量和静态局部变量在功能上有何不同计算机底层对这两类变量做了怎样的不同处理导致了这种差异"><a class="markdownIt-Anchor" href="#10-在函数内部定义的普通局部变量和静态局部变量在功能上有何不同计算机底层对这两类变量做了怎样的不同处理导致了这种差异"></a> 10 在函数内部定义的普通局部变量和静态局部变量在功能上有何不同？计算机底层对这两类变量做了怎样的不同处理导致了这种差异？</h4><p>局部作用域中静态变量的特点是：它并不会随着每次函数调用而产生一个副本，也不会 随着函数的返回而失效，定义时未指定初值的基本类型静态变量，会被以 0 值初始化；局部作用域的全部变量诞生于声明点，结束于声明所在的块执行完毕之时，并且不指定初值，意 味初值不确定。普通局部变量存放于栈区，超出作用域后，变量被撤销，其所占的内存也被 回收；静态局部变量存放于静态数据存储区，全局可见，但是作用域是局部作用域，超出作用域后变量仍然存在。</p><h4 id="11-引用和指针有何区别何时只能使用指针而不能使用引用"><a class="markdownIt-Anchor" href="#11-引用和指针有何区别何时只能使用指针而不能使用引用"></a> 11 引用和指针有何区别？何时只能使用指针而不能使用引用？</h4><p>引用是一个别名，不能为 NULL 值，不能被重新分配；<br />指针是一个存放地址的变量。<br />当需要对变量重新赋以另外的地址或赋值为 NULL 时只能使用指针。<br />引用是一个变量的别名，本身不单独分配自己的内存空间，而指针有自己的内存空间。</p><h4 id="12-比较类的-3-种继承方式之间的差别"><a class="markdownIt-Anchor" href="#12-比较类的-3-种继承方式之间的差别"></a> 12 比较类的 3 种继承方式之间的差别？</h4><p>公有继承，使得基类 public(公有)和 protected(保护)成员的访问属性在派生类中不变， 而基类 private(私有)成员不可访问。<br />私有继承，使得基类 public(公有)和 protected(保护)成员都以 private(私有)成员身份出 现在派生类中，而基类 private(私有)成员不可访问。<br />保护继承中，基类 public(公有)和 protected(保护)成员都以 protected(保护)成员身份出 现在派生类中，而基类 private(私有)成员不可访问。</p><h4 id="13-什么叫虚基类有何作用"><a class="markdownIt-Anchor" href="#13-什么叫虚基类有何作用"></a> 13 什么叫虚基类？有何作用？</h4><p>当某类的部分或全部直接基类是从另一个基类派生而来，这些直接基类中，从上一级基类继承来的成员就拥有相同的名称，派生类的对象的这些同名成员在内存中同时拥有多 个拷贝，我们可以使用作用域分辨符来唯一标识并分别访问它们。<br />我们也可以将直接基类的共同基类设置为虚基类，这时从不同的路径继承过来的该类成员在内存中只拥有一个拷 贝，这样就解决了同名成员的唯一标识问题。<br />虚基类的声明是在派生类的定义过程，其语法格式为： class 派生类名：virtual 继承方式 基类名 上述语句声明基类为派生类的虚基类，在多继承情况下，虚基类关键字的作用范围和 继承方式关键字相同，只对紧跟其后的基类起作用。<br />声明了虚基类之后，虚基类的成员在 进一步派生过程中，和派生类一起维护一个内存数据拷贝。 虚基类就是为了解决多继承产生的二义性问题</p><h4 id="14-组合与继承有什么共同点和差异通过组合生成的类与被组合的类之间的逻辑关系是什-么继承呢"><a class="markdownIt-Anchor" href="#14-组合与继承有什么共同点和差异通过组合生成的类与被组合的类之间的逻辑关系是什-么继承呢"></a> 14 组合与继承有什么共同点和差异？通过组合生成的类与被组合的类之间的逻辑关系是什 么？继承呢？</h4><p>组合和继承它们都使得已有对象成为新对象的一部分，从而达到代码复用的目的。组合 和继承其实反映了两种不同的对象关系。<br />组合反映的是“有一个”（has-s）的关系，如果类 B 中存在一个类 A 的内嵌对象，表示的 是每一个 B 类型的对象都“有一个”A 类型的对象，A 类型的对象与 B 类型的对象是部分整体 的关系。<br />继承反映的是“是一个”（is-a）的关系，在“是一个”关系中，如果类 A 是类 B 的公有基 类，那么这表示每一个 B 类型的对象都“是一个”A 类型的对象，B 类型的对象与 A 类型的对 象是特殊与一般的关系。</p><h4 id="15-基类与派生类的对象指针或引用之间哪些情况下可以隐含转换哪些情况下可以显-示转换在涉及多重继承或虚继承的情况下在转换时会面临哪些新问题"><a class="markdownIt-Anchor" href="#15-基类与派生类的对象指针或引用之间哪些情况下可以隐含转换哪些情况下可以显-示转换在涉及多重继承或虚继承的情况下在转换时会面临哪些新问题"></a> 15 基类与派生类的对象，指针或引用之间，哪些情况下可以隐含转换，哪些情况下可以显 示转换？在涉及多重继承或虚继承的情况下，在转换时会面临哪些新问题？</h4><p>派生类指针可以隐含转换为基类指针，而基类指针要想转换为派生类指针，则转换一定 要显示地进行。因为从特殊的指针转换到一般的指针时安全的，因此允许隐含转换；<br />从一般 的指针转换到特殊的指针是不安全的，因此只能显示地转换。基类对象一般无法被显式转换 为派生类对象。在多重继承情况下，执行基类指针到派生类指针的显式转换时，有时需要将 指针所存储的地址值进行调整后才能得到新指针的值。<br />但是，如果 A 类型是 B 类型的虚拟 基类，虽然 B 类型的指针可以隐含转换为 A 类型，但是 A 类型指针却无法通过 static_case 隐含转换为 B 类型的指针。</p><h4 id="16-什么叫做多态性在-c种是如何实现多态的"><a class="markdownIt-Anchor" href="#16-什么叫做多态性在-c种是如何实现多态的"></a> 16 什么叫做多态性？在 C++种是如何实现多态的？</h4><p>**多态是指同样的消息被不同类型的对象接收时导致完全不同的行为，是对类的特定成员 函数的再抽象。**C++支持重载多态，强制多态，包含多态和参数多态。 在基类中声明相应的函数为 virtual 型，然后在派生类中实现该函数，这样就可以通过 基类指针调用派生类对象的函数，实现了运行时动态绑定，即多态的功能。</p><h4 id="17-什么叫抽象类抽象类有何作用抽象类的派生类是否一定要给出纯虚函数的实现"><a class="markdownIt-Anchor" href="#17-什么叫抽象类抽象类有何作用抽象类的派生类是否一定要给出纯虚函数的实现"></a> 17 什么叫抽象类？抽象类有何作用？抽象类的派生类是否一定要给出纯虚函数的实现？</h4><p>带有纯虚函数的类是抽象类。其主要作用是通过它为一个类族建立一个公共的接口，使 他们能够更有效地发挥多态特性。抽象类声明了一个类族派生类的共同接口，而接口的完整 实现，即纯虚函数的函数体，要由派生类自己定义。抽象类派生出新的类之后，如果派生类 给出所有纯虚函数的函数实现，这个派生类就可以定义自己的对象，因而不再是抽象类；反 之，如果派生类没有给出全部纯虚函数的实现，此时的派生类仍然是一个抽象类。</p><h4 id="18-在-c中能否声明虚构造函数为什么能否声明虚析构函数有何用途"><a class="markdownIt-Anchor" href="#18-在-c中能否声明虚构造函数为什么能否声明虚析构函数有何用途"></a> 18 在 C++中，能否声明虚构造函数？为什么？能否声明虚析构函数？有何用途？</h4><p>在 C++中，不能声明虚构造函数，多态是不同的对象对同一消息有不同的行为特性，虚 函数作为运行过程中多态的基础，主要是针对对象的，而构造函数是在对象产生之前运行的， 因此虚构造函数是没有意义的；<br />可以声明虚析构函数，析构函数的功能是在该类对象消亡之前进行一些必要的清理工作， 如果一个类的析构函数是虚函数，那么，由它派生而来的所有子类的析构函数也是虚函数。 析构函数设置为虚函数之后，在使用指针引用时可以动态联编，实现运行时的多态，保证使 用基类的指针就能够调用适当的析构函数针对不同的对象进行清理工作。</p><h4 id="19-什么叫做流流的提取和插入是指什么io-流在-c中起着怎样的作用"><a class="markdownIt-Anchor" href="#19-什么叫做流流的提取和插入是指什么io-流在-c中起着怎样的作用"></a> 19 什么叫做流？流的提取和插入是指什么？I/O 流在 C++中起着怎样的作用？</h4><p>流是一种抽象，它 负责在数据的生产者和数据的消费者之间建立联系，并管理数据的流 动，一般意义下的读操作在流数据抽象中被称为（从流中）提取，写操作被称为（向流中） 插入。<br />操作系统是将键盘、屏幕、打印机和通信端口作为扩充文件来处理的，I/O 流类就是 用来与这些扩充文件进行交互，实现数据的输入与输出。</p><h4 id="20-什么叫做异常什么叫做异常处理"><a class="markdownIt-Anchor" href="#20-什么叫做异常什么叫做异常处理"></a> 20 什么叫做异常？什么叫做异常处理？</h4><p>当一个函数在执行的过程中出现了一些不平常的情况，或运行结果无法定义的情况，使 得操作不得不被中断时，我们说出现了异常。异常通常是用 throw 关键字产生的一个对象， 用来表明出现了一些意外的情况。我们在设计程序时，就要充分考虑到各种意外情况，并给 与恰当的处理。这就是我们所说的异常处理。</p><h4 id="21-c的异常处理机制有何优点"><a class="markdownIt-Anchor" href="#21-c的异常处理机制有何优点"></a> 21 C++的异常处理机制有何优点？</h4><p>C++的异常处理机制使得异常的引发和处理不必在同一函数中，这样底层的函数可以着 重解决具体问题，而不必过多地考虑对异常的处理。上层调用者可以在适当的位置设计对不 同类型异常的处理。</p><h4 id="22-比较函数重载和虚函数在概念和使用方式方面有什么区别"><a class="markdownIt-Anchor" href="#22-比较函数重载和虚函数在概念和使用方式方面有什么区别"></a> 22 比较函数重载和虚函数在概念和使用方式方面有什么区别？</h4><p>函数重载可以用于普通函数（非成员的函数）和类的成员函数，而虚函数只能用于 类的成员函数。<br />    函数重载可以用于构造函数，而虚函数不能用于构造函数。<br />    如果对成员函数进行重载，则重载的函数与被重载的函数应当都是同一类中的成员 函数，不能分属于两个不同继承层次的类。函数重载是横向的重载。虚函数是对同 一类族中的基类和派生类的同名函数的处理，即允许在派生类中对基类的成员函数 重新定义。虚函数的作用是处理纵向的同名函数。<br />    重载的函数必须具有相同的函数名，但函数的参数个数和参数类型二者中至少有一 样不同，否则在编译时无法区分它们。而虚函数则要求再同一类族中的所有虚函数 不仅函数名相同，而且要求函数类型、函数的参数个数和参数类型都全部相同，否 则就不是重定义了。也就不是虚函数了。<br />    函数重载是在程序编译阶段确定操作的对象的，属静态关联。虚函数是在程序运行 阶段确定操作的对象的，属动态关联。</p><h4 id="23-比较-class-和-struct-结构体的异同"><a class="markdownIt-Anchor" href="#23-比较-class-和-struct-结构体的异同"></a> 23 比较 class 和 struct 结构体的异同</h4><p>不同之处：</p><p>默认成员访问权限不同，struct 默认是 public，而 class 默认是 private。<br />    默认继承方式不同，struct 默认是 public，而 class 默认是 private。<br />    在定义模板参数时可以用 class 但不能用 struct。 相同之处在于：都可以包含成员函数，都可以实现继承，都可以实现多态。</p><h4 id="24-浅拷贝和深拷贝的区别"><a class="markdownIt-Anchor" href="#24-浅拷贝和深拷贝的区别"></a> 24 浅拷贝和深拷贝的区别？</h4><p>在某些情况下，类内的成员变量需要动态开辟堆内存，如果实行按位拷贝，就可能会出 现两个对象里面的成员变量指针指向同一块内存区域。当回收其中一个对象时，该对象成员 变量所指向的内存区域也将回收，会导致另一个对象存在野指针的情况。非常危险。 深拷贝和浅拷贝可以简单理解为：如果一个类拥有资源，当这个类的对象发生复制过程 的时候，资源重新分配，这个过程就是深拷贝，反之，没有重新分配资源，就是浅拷贝。</p><h4 id="25-const-和-static-作用-const-作用"><a class="markdownIt-Anchor" href="#25-const-和-static-作用-const-作用"></a> 25 const 和 static 作用 const 作用：</h4><p>const:</p><p>定义 const 常量，具有不可变性，保护被修饰的东西。防止意外修改，增强程序的 健壮性。<br />    便于类型检查，使编译器对处理内容有更多的了解。<br />    可以避免意义模糊的数字出现，也便于进行参数的修改。同宏定义一样，可以做到 不变则以，一变都变。<br />    const 定义的常量在程序运行过程中只有一份拷贝，而宏定义却又若干份拷贝。</p><p>static:</p><p>作为类的静态数据成员：被类的所有对象共同拥有，在内存中只有一份拷贝。在类 内声明，在类外初始化。<br />    在全局变量前加上 static 关键字，该变量被定义为一个全局变量，<br />    特点：<br />    a) 变量在全局数据区分配内存<br />    b) 如果不显示初始化，则隐式的初始化为 0<br />    c) 作用域仅限于本文件内<br />    在局部变量前加 static 关键字，该变量被定义为静态局部变量，<br />    特点：<br />    a) 在全局数据区分配内存<br />    b) 如果不显示初始化，则隐式的初始化为 0<br />    c) 始终驻留在全局数据区，直到程序结束。作用域仅限于函数体内，当函数执行 完后作用域随之消失。<br />    静态函数，<br />    特点：<br />    a) 静态函数只能在本源文件中使用<br />    b) 在文件作用域下声明的 inline 函数默认是 static 的</p><h4 id="26-析构函数带-virtual-和-不带-virtual-的区别"><a class="markdownIt-Anchor" href="#26-析构函数带-virtual-和-不带-virtual-的区别"></a> 26 析构函数带 virtual 和 不带 virtual 的区别</h4><p>如果基类要被派生，则析构函数一定要带 virtual。否则，通过基类指针指向派生类对象 后，删除该指针时并不会释放派生类对象的空间。也即，不会调用派生类的析构函数。</p><p>不带 virtual 的几种情况：</p><p>作为非公有基类<br />    不作为接口使用的基类<br />    可以保证这个类不被 public 继承<br />    如果他的所有派生类的 virtual 函数都是什么都不做<br />    如果不需要基类指针指向派生类对象</p><h4 id="27-重写重载和隐藏的区别"><a class="markdownIt-Anchor" href="#27-重写重载和隐藏的区别"></a> 27 重写，重载和隐藏的区别？</h4><p>重载：在一个类中的同名函数，但参数列表不同，函数的返回值相同。<br />隐藏：派生类的函数屏蔽了与其同名的父类函数<br />重写（覆盖）：父类和子类存在相同的函数，包括返回值，参数列表均相同，父类的该 函数必须含有 virtual 关键字。</p><h4 id="28-c中的四个默认的函数"><a class="markdownIt-Anchor" href="#28-c中的四个默认的函数"></a> 28 C++中的四个默认的函数</h4><p>构造函数：先基类后派生类<br />    拷贝函数：对象被创建时调用<br />    调用拷贝构造函数的情况：<br />    a) 一个对象以值传递的方式传入函数体<br />    b) 一个对象以值传递的方式从函数返回<br />    c) 一个对象需要通过另外一个对象初始化<br />    析构函数：每个类只有一个析构函数，<br />    赋值函数：</p><h4 id="29-不可以被重载的运算符五个"><a class="markdownIt-Anchor" href="#29-不可以被重载的运算符五个"></a> 29 不可以被重载的运算符–五个</h4><p>类属关系运算符、成员指针运算符“、作用域运算符、 sizeof 运算符和三目 运算符<br />. .* :: sizeof() ?:</p><h4 id="30-三种字符数组初始化的方法"><a class="markdownIt-Anchor" href="#30-三种字符数组初始化的方法"></a> 30 三种字符数组初始化的方法</h4><p>char str[5] = {“hello”};<br />char str[6] = {‘a’,‘b’,‘c’,‘d’,‘e’,’\0’};<br />char str[] = “abcde”;</p><h4 id="31-哪些操作符必须重载为成员函数"><a class="markdownIt-Anchor" href="#31-哪些操作符必须重载为成员函数"></a> 31 哪些操作符必须重载为成员函数</h4><p>必须重载：<br />= -&gt; () [] new delete</p><h4 id="32-什么是else-摇摆问题举例说明"><a class="markdownIt-Anchor" href="#32-什么是else-摇摆问题举例说明"></a> 32 什么是“else 摇摆问题”，举例说明</h4><p>C++编译器总是把 else 同与它最近的 if 联系起来，因此如果没有正确放置花括号对就 会出现逻辑错误。</p><h4 id="33-函数模板和函数重载的区别与联系"><a class="markdownIt-Anchor" href="#33-函数模板和函数重载的区别与联系"></a> 33 函数模板和函数重载的区别与联系</h4><p>函数重载：C++允许使用同一个函数名，不同的参数个数和参数类型来定义多个函数。 重载函数的参数个数，类型，顺序至少有一个不同。返回值可以相同，也可以不同。</p><p>函数模板：是对一类同构函数的抽象定义，并不是具体的函数，函数模板的定义被编译 时不会产生任何可执行的代码。 联系： 针对不同类型的数据，但实现相同功能的函数重载可以通过函数模板来替代。</p><h4 id="34-怎样区别虚函数和纯虚函数两者都有什么作用"><a class="markdownIt-Anchor" href="#34-怎样区别虚函数和纯虚函数两者都有什么作用"></a> 34 怎样区别虚函数和纯虚函数？两者都有什么作用</h4><p>纯虚函数是在基类中声明的虚函数，在基类中没有定义。在基类中实现纯虚函数的方法 是在函数原型后加“=0。虚函数可以实现也可以不实现。<br />定义纯虚函数是为了实现一个接口，起到了一个规范的作用。规范继承这个类的程序员 必须实现这个接口。<br />声明了纯虚函数的类为抽象类，不能实例化对象。 定义虚函数是为了允许用基类的指针来调用子类的这个函数。<br />抽象类的作用：将有关的操作作为一个接口组织在一个继承层次结构中，由他来为派生 类提供一个公共的根。派生类将具体实现在其基类中作为接口的操作。</p><h4 id="35-面向对象程序接口与实现方法分离有什么作用好处"><a class="markdownIt-Anchor" href="#35-面向对象程序接口与实现方法分离有什么作用好处"></a> 35 面向对象程序“接口与实现方法分离”，有什么作用（好处）</h4><p>接口与实现分离技术可以只把接口暴露给用户，具体的实现细节隐藏起来，当需要改动 代码时，只要在实现部分修改后编译，用户无需再编译自己的项目。</p><h4 id="36-列出所有与字符串处理有关的头文件"><a class="markdownIt-Anchor" href="#36-列出所有与字符串处理有关的头文件"></a> 36 列出所有与字符串处理有关的头文件</h4><p>string.h 是 C 语言中字符串操作函数的头文件<br />cstring 是 c<ins>对 C 语言中的 strcpy 之类的函数申明，包含 cstring 之后，就可以在程序 中使用 C 语言风格的 strcpy 之类的函数。<br />string 是 c</ins>语言中 string 类模板的申明<br />CString 是 MFC 中定义的字符串类，MFC 中很多类及函数都是以 CString 为参数的</p><h4 id="37-c中显示类型转换"><a class="markdownIt-Anchor" href="#37-c中显示类型转换"></a> 37 C++中显示类型转换</h4><p>static_cast：最常用的类型转换，提供基本数据类型之间的转换操作。<br />    const_cast：可以把 const 类型的指针转换为非 const 类型的指针。<br />    reinterpret_cast：解释的意思，主要用于不相关类型之间的转换。目标和原始值之 间至少有相同的位数，我们可以将转换之后的值再转换回去，而不像其它 3 种类型 可能会导致精度丢失<br />    dynamic_cast：运行时检查该转换是否类型安全，但只有在多态类型时合法，主要 用于类层次间的上行和下行转换，还可以用于类之间的交叉转换。在进行类层次间 的上行转换时和 static_cast 效果一样，进行下行转换时，具有类型检查的功能，比 static_cast 更安全。</p><p>38 delete 和 delete [] 的区别？<br />delete ptr 代表用来释放内存，且只用来释放 ptr 指向的内存。<br />delete[] rg 用来释放 rg 指向的内存！！还逐一调用数组中每个对象的析构函数 对于像 int/char/long/int*/struct 等等简单数据类型，由于对象没有 destructor，所以用 delete 和 delete [] 是一样的！但是如果是 C++对象数组就不同了！</p><h4 id="39-存储类别说明符可划分为两类"><a class="markdownIt-Anchor" href="#39-存储类别说明符可划分为两类"></a> 39 存储类别说明符可划分为两类。</h4><p>静态存储类别（static，extern）和自动存储类别（auto， register）。这样的变量在程序执行进入到定义它们的程序块时创建，在程序块激活时存在， 在程序块退出时销毁。</p><h4 id="40-什么是运算符重载它如何增强-c的扩展性"><a class="markdownIt-Anchor" href="#40-什么是运算符重载它如何增强-c的扩展性"></a> 40 什么是运算符重载，它如何增强 C++的扩展性？</h4><p>运算符重载是对已有的运算符赋予多重含义，使得同一个运算符作用于不同类型的数据 时导致不同的行为。 运算符重载的本质是函数重载，可以改变现有运算符的操作方式，以适用于类类型，为 类的用户提供了一个直接的接口，使得用户程序所用的语言是面向问题的，而不是面向机器的，增强了 C++的扩展性。</p><h4 id="41-为什么说继承是-c面向对象的主要特征之一请简要说明"><a class="markdownIt-Anchor" href="#41-为什么说继承是-c面向对象的主要特征之一请简要说明"></a> 41 为什么说”继承是 C++面向对象的主要特征之一”?请简要说明.？</h4><p>继承是一种联结类的层次模型，层次结构的上层是最具有通用性的，而下层的部分，即 后代具有特殊性。类可以从他的祖先那里继承方法和成员变量，也可以增加新的方法是适用 于特殊的需要。如果没有继承，类就缺失了一块层次结构，代码重用和数据共享就贯彻不到 底，有了继承，就会有抽象编程中的多态问题，只有从机制内部真正解决了多态表现问题， 对象的数据封装，信息隐藏，代码重用等招式才能淋漓尽致的发挥出来。才称得上真正的面 向对象编程。</p><h4 id="42-作用域辨析有哪些"><a class="markdownIt-Anchor" href="#42-作用域辨析有哪些"></a> 42 作用域辨析有哪些？</h4><p>类作用域： 在类的作用域内，类的成员可以被类的所有成员函数直接访问，在类的作用域之外， public 类成员通过对象的句柄之一而引用。句柄可以是对象名称，对象的引用，对象的指针。 对象，引用或指针指定了客户可访问的接口。<br />    全局名字空间作用域： 声明与任何函数或者类之外的标识符具有全局名字空间作用域，这种标识符对于从其声 明处开始直到文件结尾处为止出现的所有函数都是已知的，即可访问的。位于函数之外的全局变量。函数定义和函数原型都属于该作用域。<br />    函数作用域： 标签是唯一具有函数作用域的标识符，标签可以在函数中的任何地方使用，但是不能在 函数体外被引用。<br />    局部作用域： 在一个语句块中声明的作用域，开始于标识符的声明出，结束于标识符声明处所在语句 块的结束右花括号处。局部变量具有局部作用域，函数形参也是函数的局部作用域。当语句 块是嵌套的，并且外层语句块的一个标识符和内层语句块的一个标识符具有相同的名字时， 外层的标识符处于隐藏状态，直到内存的语句块执行结束为止。<br />    函数原型作用域： 函数原型形参列表中的标识符，在一个函数原型中，一个特定的标识符只能使用一次。</p><h4 id="43stl-是什么组成部分和区别"><a class="markdownIt-Anchor" href="#43stl-是什么组成部分和区别"></a> 43.STL 是什么？组成部分和区别。</h4><p>STL 是 c++提供的标准模板库。<br />STL 的主要组成部分为：容器、迭代器、算法、函数对象和适配器。其中算法处于核心 地位，迭代器如同算法和容器之间的桥梁，算法通过迭代器从容器中获取元素，然后将获取 的元素传递给特定的函数对象的操作，最后将处理后的结果存储到容器中。</p><h4 id="44-如何声明和使用虚函数-说明它在多态性中的作用和意义"><a class="markdownIt-Anchor" href="#44-如何声明和使用虚函数-说明它在多态性中的作用和意义"></a> 44 如何声明和使用虚函数。说明它在多态性中的作用和意义。</h4><p>声明：在基类中声明成员函数时在前面加上关键字 virtual 。<br />使用虚函数：在基类中将成员函数声明为虚函数，这样在派生类中重写该方法后，在使 用基类的指针或引用指向派生类对象时，就可以通过这个基类指针或引用访问到派生类的方法。</p><p>C++中的多态可分为四类：重载多态、强制多态、包含多态和参数多态，其中包含多态 是研究类族中定义于不同类中的同名函数的多态行为，主要通过虚函数来实现。多态使得接 口与实现得到分离，要利用统一接口实现运行时多态一般需要动态绑定，而虚函数是动态绑 定的基础，就使得虚函数在多态中很重要。</p><p>多态指同样的消息被不同类型的对象接收时导致不同的行为。 虚函数机理：当编译器看到 fn 的虚函数标志时，会记下，等遇到这个虚函数的调用时，将 该捆绑操作滞后到运行中，以实际的对象来捆绑其对应的成员函数操作，编译器在捆绑操作 b.fn()处避开函数调用，只作一个指向实际对象成员函数的间接访问，每个实际的对象都需 额外占有一个指针空间，以指向类中的虚函数表。</p><h4 id="44什么是逻辑错误什么是语法错误请举例说明"><a class="markdownIt-Anchor" href="#44什么是逻辑错误什么是语法错误请举例说明"></a> 44.什么是逻辑错误？什么是语法错误？请举例说明。</h4><p>逻辑错误：由于程序设计人员设计的算法有错或编写的程序有错，此时程序一般能够正 常运行，但是通知给系统的指令与解题的原意不相同，即出现了逻辑上的混乱。 例如：int a[5] = { 1 , 2 , 3 , 4 , 5} ; for( int i = 0 ; i &lt;= 0 ; i ++ ) cout &lt;&lt; a[i] &lt;&lt; endl ; //发生数组越界</p><p>语法错误：违背了 C++语言的规定，不能生成可执行文件，主要是语句的结构或拼写中 存在的错误。 例如：for( int i = 0 , i &lt; 10 , i ++) { } //应该用“;</p><h4 id="45-编写语句说明枚举类型是如何定义和使用的"><a class="markdownIt-Anchor" href="#45-编写语句说明枚举类型是如何定义和使用的"></a> 45 编写语句说明枚举类型是如何定义和使用的。</h4><p>枚举类型的声明形式如下 enum 枚举类型名 { 变量值列表 } ;</p><p>例如： enum weekday{ sun , mon , tue , wed , thu , fri , sta } ; 变量定义：enum weekday a , b , c = tue ; //也可以省略 enum</p><p>枚举元素具有默认值，他们依次是：0 , 1 , 2 , … , 例子中：sun 的值为 0 ， mon 的值 为 1，tue 的值为 2，… ,sta 的值为 6 。<br />    枚举元素按常量处理，不能进行赋值。<br />    整数值也不能赋给枚举变量，如确实需要可进行强制类型转换。<br />    枚举变量可以进行关系运算。</p><h4 id="46-adt是什么简述你对数据抽象和信息隐藏的认识"><a class="markdownIt-Anchor" href="#46-adt是什么简述你对数据抽象和信息隐藏的认识"></a> 46 ADT是什么？简述你对“数据抽象”和“信息隐藏”的认识。</h4><p>C++内部的数据类型包括基本类型和复合类型（数组、字符串、指针和结构），有表示 范围，只是用可以接受的方式表示实际概念。确定了一个类型就确定了计算机存储给类型所 需要的容量，确定了其表示范围，也确定了对该类型可以进行的操作。</p><p>抽象数据类型（Abstract Data Type)，简称 ADT，是指一个数学模型以及定义在该模型 上的一组操作。 通常以以下格式定义： ADT 抽象数据类型名{ 数据对象：&lt;数据对象的定义&gt; 数据关系：&lt;数据关系的定义&gt; 基本操作：&lt;基本操作的定义&gt; }</p><p>数据抽象：对具体事物描述的一个概括。通过数据抽象可以将数据类型的定义和它的实 现分开，使得只研究和使用它的结构而不用考虑它的实现细节成为可能。C++中的类就是一 种数据抽象，类是具有相同属性和服务的一组对象的集合。</p><p>信息隐藏：C++中的封装就是信息隐藏的一种，即尽可能的隐藏对象的内部细节，对外 形成一个边界，只保留有限的对外接口使之与外部反生关系。</p><h4 id="47-简述你对面向对象和面向过程编程思想的理解和认识"><a class="markdownIt-Anchor" href="#47-简述你对面向对象和面向过程编程思想的理解和认识"></a> 47 简述你对“面向对象”和“面向过程”编程思想的理解和认识。</h4><p>“面向过程”是一种以事件为中心的编程思想，就是分析出解决问题所需要的步骤，然后 用函数把这些步骤一步一步实现，使用的时候一个一个依次调用就可以了。过程化编程强调 功能，以过程模块为中心，分层逐步展开设计。通常采用结构化程序设计，基本思路为：自 顶向下、逐步求精。</p><p>“面向对象”的编程思想就是把你需要解决的问题中的所有具体的东西，都看成一个个具 有属性和行为的对象，然后把所有具有相同性质的对象抽象成类，那些与问题无关的对象则 忽略。对象化编程强调分离抽象层次，以便让程序员分工，关心不同抽象层次中的细节，而 不用去关心不同抽象层次的联系，数据安全而隐蔽，不同抽象层次的职责分明。</p><h4 id="50-写出递归函数定义以及相应的优缺点"><a class="markdownIt-Anchor" href="#50-写出递归函数定义以及相应的优缺点"></a> 50 写出递归函数定义以及相应的优缺点</h4><p>递归函数是直接或间接地（通过另一个函数）调用自己。</p><p>优点：<br />结构清晰，可读性强，使程序易于理解和调试。</p><p>缺点</p><p>效率较低。递归是有时间和空间消耗的。另外，递归有可能很多计算都是重复的，从而给性能带来很大的负面影响。因为递归的本质是把一个问题分解成连个或者多个小问题。如果多个小问题存在相互重叠的部分，那么就存在重复的计算。</p><p>可能导致调用栈溢出。每一次函数调用在内存栈中分配空间，而每个进程的栈的容量是有限的。当递归调用的层级太多时，就会超出栈的容量，从而导致栈溢出。</p><h4 id="51-写出包含输入输出的标准库"><a class="markdownIt-Anchor" href="#51-写出包含输入输出的标准库"></a> 51 写出包含输入输出的标准库</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">    &lt;fstream&gt;</span><br><span class="line">    &lt;iomanip&gt;</span><br><span class="line">    &lt;ios&gt;</span><br><span class="line">    &lt;iosfwd&gt;</span><br><span class="line">    &lt;iostream&gt;</span><br><span class="line">    &lt;ostream&gt;</span><br><span class="line">    &lt;istream&gt;</span><br><span class="line">    &lt;sstream&gt;</span><br><span class="line">    &lt;streambuf&gt;</span><br></pre></td></tr></table></figure><h4 id="52-怎样区别虚函数和纯虚函数两者都有什么作用"><a class="markdownIt-Anchor" href="#52-怎样区别虚函数和纯虚函数两者都有什么作用"></a> 52 怎样区别虚函数和纯虚函数？两者都有什么作用</h4><p>虛函數介紹</p><p>虚函数，在类成员方法的声明（不是定义）语句前加“virtual”, 如 virtual void func()<br />    纯虚函数，在虚函数后加“=0”，如 virtual void func()=0<br />    对于虚函数，子类可以（也可以不）重新定义基类的虚函数，该行为称之为复写Override。<br />    对于纯虚函数，子类必须提供纯虚函数的个性化实现。</p><p>在派生子类中对虚函数和纯虚函数的个性化实现，都体现了“多态”特性。但区别是：</p><p>子类如果不提供虚函数的实现，将会自动调用基类的缺省虚函数实现，作为备选方案；<br />    子类如果不提供纯虚函数的实现，编译将会失败。尽管在基类中可以给出纯虚函数的实现，但无法通过指向子类对象的基类类型指针来调用该纯虚函数，也即不能作为子类相应纯虚函数的备选方案。（纯虚函数在基类中的实现跟多态性无关，它只是提供了一种语法上的便利，在变化多端的应用场景中留有后路。）</p><p>虚函数：当使用类的指针调用成员函数时，普通函数由指针类型决定，而虚函数由指针指向的实际类型决定。所以虚函数的调用时由指针所指向内存块的具体类型决定的。</p><p>纯虚函数：纯虚函数是在基类中声明的虚函数，它要求任何派生类都要定义自己的实现方法，以实现多态性。实现了纯虚函数的子类，该纯虚函数在子类中就变成了虚函数。</p><p>定义纯虚函数是为了实现一个接口，用来规范派生类的行为，也即规范继承这个类的程序员必须实现这个函数。派生类仅仅只是继承函数的接口。纯虚函数的意义在于，让所有的类对象（主要是派生类对象）都可以执行纯虚函数的动作，但基类无法为纯虚函数提供一个合理的缺省实现。所以类纯虚函数的声明就是在告诉子类的设计者，“你必须提供一个纯虚函数的实现，但我不知道你会怎样实现它”。</p><p>含有纯虚函数的类称之为抽象类，它不能生成对象（创建实例），只能创建它的派生类的实例。抽象类是一种特殊的类，它是为了抽象和设计的目的为建立的，它处于继承层次结构的较上层。抽象类的主要作用是将有关的操作作为结果接口组织在一个继承层次结构中，由它来为派生类提供一个公共的根，派生类将具体实现在其基类中作为接口的操作。</p><p>抽象类只能作为基类来使用，其纯虚函数的实现由派生类给出。如果派生类中没有重新定义纯虚函数，而只是继承基类的纯虚函数，则这个派生类仍然还是一个抽象类。如果派生类中给出了基类纯虚函数的实现，则该派生类就不再是抽象类了，它是一个可以建立对象的具体的类。</p>]]></content>
    
    
    <summary type="html">面向对象的程序设计</summary>
    
    
    
    <category term="C++" scheme="https://guyinga.top/categories/C/"/>
    
    
    <category term="C++" scheme="https://guyinga.top/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>C++程序设计简答题（一）</title>
    <link href="https://guyinga.top/60769b04bdeb/"/>
    <id>https://guyinga.top/60769b04bdeb/</id>
    <published>2022-03-05T16:00:00.000Z</published>
    <updated>2022-11-14T07:34:57.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="1-简述你对c中的数据类型和抽象数据类型adts的理解"><a class="markdownIt-Anchor" href="#1-简述你对c中的数据类型和抽象数据类型adts的理解"></a> 1、简述你对C++中的数据类型和抽象数据类型（ADTs）的理解</h4><blockquote><p>数据类型是⼀组性质相同的具有⼀定范围的值集以及定义于这个值集上的⼀组操作。数据类型既有内部数据类型，如int，char，float，bool等，⼜有⾃定义外部数据类型，如枚举类型，结构类型，联合类型，数组类型、类类型。ADT即抽象数据类型，是基于已有类型⽽组合⽣成的复合数据类型，类正是抽象数据类型的描述形式</p></blockquote><h4 id="2-阐述c在什么情况下必须进行运算符重载"><a class="markdownIt-Anchor" href="#2-阐述c在什么情况下必须进行运算符重载"></a> 2、阐述C++在什么情况下必须进⾏运算符重载</h4><blockquote><p>只有当⼆元运算符最左边的操作数是该类的⼀个对象，或者当⼀元运算符的操作数是该类的⼀个对象时，才有必要进⾏运算符重载</p></blockquote><h4 id="3-为什么说继承是c面向对象的一个主要特征之一"><a class="markdownIt-Anchor" href="#3-为什么说继承是c面向对象的一个主要特征之一"></a> 3、为什么说继承是C++⾯向对象的⼀个主要特征之⼀</h4><blockquote><p>继承是一种联结类的层次模型，层次结构的上层是最具有通用性的，而下层的部分，即后代具有特殊性。类可以从他的祖先那里继承方法和成员变量，也可以增加新的方法是适用于特殊的需要。如果没有继承，类就缺失了一块层次结构，代码重用和数据共享就贯彻不到<br />底，有了继承，就会有抽象编程中的多态问题，只有从机制内部真正解决了多态表现问题，对象的数据封装，信息隐藏，代码重用等招式才能淋漓尽致的发挥出来。才称得上真正的面向对象编程。</p></blockquote><h4 id="4-如何声明和使用虚函数说明它在多态性中的作用和意义"><a class="markdownIt-Anchor" href="#4-如何声明和使用虚函数说明它在多态性中的作用和意义"></a> 4、如何声明和使⽤虚函数，说明它在多态性中的作⽤和意义</h4><blockquote><p>声明虚函数时，在基类的函数原型前加关键字virtual，在派⽣类中重写函数；⽤名称和圆点成员选择运算符引⽤⼀个特定的对象以调⽤虚函数，被调⽤的虚函数是在编译时确定的；也可以通过基类指针调⽤函数，让程序在任何给定的时刻基于基类指针所指对象的对象类型，动态确定执⾏相应的派⽣类的函数。虚函数是多态性的主要实现⽅式，利⽤虚拟函数和多态性，程序员可以处理普遍性⽽让执⾏环境处理特殊性，即使在不知道⼀些对象的类型的情况下（只要这些对象属于同⼀继承层次并且通过⼀个共同的基类指针访问），程序员也可以命令各种对象表现出适合这些对象的⾏为</p></blockquote><h4 id="5-请说明函数模板和模板函数的区别与联系"><a class="markdownIt-Anchor" href="#5-请说明函数模板和模板函数的区别与联系"></a> 5、请说明函数模板和模板函数的区别与联系</h4><blockquote><p>函数模板：以具体的类型为实参来⽣成函数体的模板；模板函数：函数模板实例化的结果，由函数模板将涉及的数据类型为参数来⽣成的模板化函数函数模版就是数据类型参数化的函数定义，是⼀个函数族，代表的是⼀类函数。 当编译系统发现⽤指定数据类型调⽤函数模版时，就创建了⼀个模版函数，模版函数是⼀个实例化的具体函数</p></blockquote><h4 id="6-编写语句说明枚举类型是如何定义和使用的"><a class="markdownIt-Anchor" href="#6-编写语句说明枚举类型是如何定义和使用的"></a> 6、编写语句说明枚举类型是如何定义和使⽤的</h4><blockquote><p>Enum Week{Mon，Tue，Wed，Thu，Fri，Sat，Sun}；枚举类是对整数区间的⾃定义类型，⼀旦定义则不能改变，常常代替整数常量使⽤，可以使程序更清晰、更持久。在进⼊函数调⽤或其他模块时，常量需要初始化，⽽枚举类型是⼀种类型，⽆须定义实体，便可直接使⽤枚举符。默认对应着整数0,1,2…当然也可以Enum Week{Mon=1，Tue，Wed，Thu，Fri，Sat，Sun}；这样定义，对应的整数就变成1,2,3…</p></blockquote><h4 id="7-什么是逻辑错误什么是语法错误请举例说明"><a class="markdownIt-Anchor" href="#7-什么是逻辑错误什么是语法错误请举例说明"></a> 7、什么是逻辑错误?什么是语法错误?请举例说明</h4><blockquote><p>语法错误是对语⾔规则的违背，当编译器不能正确识别语句时，便会导致语法错误，它们都是在编译阶段出现的，所以也叫编译错误，编译不能通过，⽐如语句末尾缺少分号等。逻辑错误是指算法上的错误，编译能通过，程序可以完成运⾏，但往往产⽣不正确的结果，⽐如循环语句结束条件没写，造成死循环</p></blockquote><h4 id="8-控制语句有哪几种请画出它的流程图或uml图"><a class="markdownIt-Anchor" href="#8-控制语句有哪几种请画出它的流程图或uml图"></a> 8、控制语句有哪⼏种?请画出它的流程图或UML图</h4><div class="tag-plugin image"><div class="image-bg"><img src="/images/文章图片/程序设计简答题/c08.png" fancybox="true"/></div></div><blockquote><p>顺序，选择，循环。UML就是统⼀建模语⾔，是⽤的最⼴泛的图形化表示⽅案</p></blockquote><h4 id="9-什么是运算符重载它如何增强了-c的扩展性"><a class="markdownIt-Anchor" href="#9-什么是运算符重载它如何增强了-c的扩展性"></a> 9、什么是运算符重载?它如何增强了 C++的扩展性?</h4><blockquote><p>运算符重载是对已有的运算符赋予多重含义，使得同一个运算符作用于不同类型的数据时导致不同的行为。运算符重载的本质是函数重载，可以改变现有运算符的操作方式，以适用于类类型，为类的用户提供了一个直接的接口，使得用户程序所用的语言是面向问题的，而不是面向机器的，增强了 C++的扩展性。</p></blockquote><h4 id="10-请详细说明c作用域"><a class="markdownIt-Anchor" href="#10-请详细说明c作用域"></a> 10、请详细说明C++作⽤域</h4><blockquote><ul><li>类作用域：<br />在类的作用域内，类的成员可以被类的所有成员函数直接访问，在类的作用域之外，public 类成员通过对象的句柄之一而引用。句柄可以是对象名称，对象的引用，对象的指针。对象，引用或指针指定了客户可访问的接口。</li><li>全局名字空间作用域：<br />声明与任何函数或者类之外的标识符具有全局名字空间作用域，这种标识符对于从其声明处开始直到文件结尾处为止出现的所有函数都是已知的，即可访问的。位于函数之外的全局变量。函数定义和函数原型都属于该作用域。</li><li>函数作用域：<br />标签是唯一具有函数作用域的标识符，标签可以在函数中的任何地方使用，但是不能在函数体外被引用。</li><li>局部作用域：<br />在一个语句块中声明的作用域，开始于标识符的声明出，结束于标识符声明处所在语句块的结束右花括号处。局部变量具有局部作用域，函数形参也是函数的局部作用域。当语句块是嵌套的，并且外层语句块的一个标识符和内层语句块的一个标识符具有相同的名字时，外层的标识符处于隐藏状态，直到内存的语句块执行结束为止。</li><li>函数原型作用域：<br />函数原型形参列表中的标识符，在一个函数原型中，一个特定的标识符只能使用一次。</li></ul></blockquote><h4 id="11-部分填空题"><a class="markdownIt-Anchor" href="#11-部分填空题"></a> 11、部分填空题</h4><blockquote><p>(1).程序从哪⾥开始运⾏ <u>main()函数</u><br />(2).三种控制结构 <u>顺序</u> 、 <u>选择</u> 、 <u>循环</u><br />(3).可以初始化指针的值 <u>nullptr</u> 、 <u>0</u> 、 <u>具体的地址</u><br />注：nullptr是C++11新引⼊的，写NULL也⾏<br />(4).对象之间看不到其他对象的具体操作的属性是 <u>信息隐藏</u><br />注：信息隐藏包括但不限于private、protected及接⼝类这些⼿段。注意区分封装和信息隐藏之间的区别。<br />(5).⽤户⾃定义类型的⼀个实例叫什么 <u>对象</u><br />注：类是抽象数据类型(ADTs)的描述形式<br />(6).如果每次运⾏环境只能执⾏⼀条语句,但是有许多语句需要执⾏,那么 ⽤ <u>花括号</u> {} <u>括起来</u> , 构成 <u>语句块</u><br />(7).标识符的作⽤域: <u>语句块作⽤域</u> 、 <u>函数原型作⽤域</u> 、 <u>函数作⽤域</u> 、<u>类作⽤域</u> 、<u>命名空间及全局命名空间作⽤域</u><br />(8). 哪⼏个运算符必须重载为成员函数 </u> () </u> 、 <u>[]</u> 、<u>-&gt;</u> 、<u>=</u><br />(9). 哪些运算符不能重载: <u>.</u>  <u>.*</u>(成员指针运算符)  <u>::</u>  <u>?:</u>  <u>sizeof 运算符</u><br />(10).哪些操作符必须重载为成员函数 <u> = -&gt; () [] new delete </u></p></blockquote><h4 id="12-说明stdcinstdcoutstdcerr的含义"><a class="markdownIt-Anchor" href="#12-说明stdcinstdcoutstdcerr的含义"></a> 12、说明std::cin,std::cout,std::cerr的含义</h4><blockquote><p>都是标准流对象</p><ul><li>cin：istream实例，连接到标准输⼊设备</li><li>cout：ostream实例，连接到标准输出设备</li><li>cerr：ostream实例，连接到标准错误设备，输出是⽆缓冲的</li><li>补充⼀个 clog：ostream实例，连接到标准错误设备，输出是有缓冲的</li></ul></blockquote><h4 id="13-存储类说明符有哪些作用分别是"><a class="markdownIt-Anchor" href="#13-存储类说明符有哪些作用分别是"></a> 13、存储类说明符有哪些？作⽤分别是？</h4><blockquote><p>auto、static、extern、register</p><ul><li>auto 标明⼀个变量具有⾃动存储时期，该说明符只能⽤在具有代码块作⽤域的变量声明中。⽐如⼀般的局部变量或是在函数原型中的参数。</li><li>register 只能⽤在具有代码块作⽤域的变量。请求⼀个变量存储在寄存器中快速使⽤，但是不能获得改变量的地址。register常常是不必要的。</li><li>static 使⽤static声明的局部变量仅被其声明所在的函数所知，static局部变量在函数返回到它的调⽤者后仍保留着变量的值。</li><li>extern 表明在声明⼀个在其他地⽅定义了的变量(该关键字⽤于全局变量)。<br />| 类型 | 特性 |<br />| ---- | ---- |<br />| auto | 具有代码块作⽤域，⾃动存储期，外部或者内部链接属性 |<br />| register | 具有代码块作⽤域，⾃动存储期，外部或者内部链接属性 |<br />| static | 具有代码块或者⽂件作⽤域、静态存储期、内部链接 |<br />| extern | 具有⽂件作⽤域、静态存储期、外部链接 |</li></ul></blockquote><h4 id="14-运算符有哪些含义"><a class="markdownIt-Anchor" href="#14-运算符有哪些含义"></a> 14、 * 运算符有哪些含义</h4><blockquote><p>答：乘法、指针的间接运算符</p></blockquote><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">int *ptr; //声明⼀个指针</span><br><span class="line">*ptr = 10; //表示指针操作数所指向的对象(内存块)</span><br></pre></td></tr></table></figure><h4 id="15-多态性如何实现"><a class="markdownIt-Anchor" href="#15-多态性如何实现"></a> 15、多态性如何实现</h4><blockquote><p>多态是指同样的消息被不同类型的对象接收时导致完全不同的⾏为，是对类的特定成员函数的再抽象。C++⽀持的多态有多种类型，重载（包括函数重载和运算符重载）和虚函数是其主要的⽅式</p></blockquote><h4 id="16-什么是else摇摆问题举例说明"><a class="markdownIt-Anchor" href="#16-什么是else摇摆问题举例说明"></a> 16、什么是“else摇摆问题”，举例说明</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">if (a&gt;0)</span><br><span class="line">if(b&gt;0)</span><br><span class="line">...</span><br><span class="line">else</span><br><span class="line">...</span><br></pre></td></tr></table></figure><blockquote><p>这⾥的else应该与第⼆个if匹配⽽⾮第⼀个</p></blockquote><h4 id="17-函数模板和函数重载的区别与联系"><a class="markdownIt-Anchor" href="#17-函数模板和函数重载的区别与联系"></a> 17、函数模板和函数重载的区别与联系</h4><blockquote><ul><li>若⼀个函数的功能是对任意类型的数据作同样的处理，则将所处理的数据类型说明为参数，就可以把这个程序改写为函数模版。函数模版就是数据类型参数化的函数定义，代表的是⼀类函数。其参数都是抽象的。</li><li>⽤同⼀函数名定义多个函数，这些函数的参数个数、参数类型或参数顺序不同，这就是函数重载。每个重载函数的参数是具体的。但参数完全相同⽽返回值不同的函数不构成重载。</li><li>有⼀种特殊情况：重载模版函数。当编译器在处理重载模版函数的问题时，遵循的原则是：⾸选函数名、参数类型都匹配的具体函数，再找模版。</li></ul></blockquote><h4 id="18-怎样区别虚函数和纯虚函数两者都有什么作用"><a class="markdownIt-Anchor" href="#18-怎样区别虚函数和纯虚函数两者都有什么作用"></a> 18、怎样区别虚函数和纯虚函数？两者都有什么作⽤</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">virtual void fun(); //虚函数</span><br><span class="line">virtual void fun() = 0; //纯虚函数</span><br></pre></td></tr></table></figure><blockquote><p>虚函数⽤于基类与派⽣类的同名操作使其具有多态性，纯虚函数是⽤来定义抽象类的。</p></blockquote><h4 id="19-面向对象程序接口与实现方法分离有什么优点"><a class="markdownIt-Anchor" href="#19-面向对象程序接口与实现方法分离有什么优点"></a> 19、⾯向对象程序“接⼝与实现⽅法分离”，有什么优点</h4><blockquote><ul><li>接⼝定义并标准化了⼈和系统等诸如此类事物彼此交互的⽅式</li><li>成员函数的实现细节对客户代码是隐藏的(即信息隐藏)，使得程序员不会写出依赖类的实现细节的客户代码</li><li>程序更容易修改，只要类的接⼝保持不变，类的实现的改变不会影响客户</li><li>加快编译速度，提⾼了维护性，使得代码变得清晰</li></ul></blockquote><h4 id="20-列出所有与字符串处理有关的头文件"><a class="markdownIt-Anchor" href="#20-列出所有与字符串处理有关的头文件"></a> 20、列出所有与字符串处理有关的头⽂件</h4><blockquote><ul><li>string.h是C语⾔中字符串操作函数的头⽂件</li><li>cstring是C<ins>对C语⾔中的strcpy之类的函数申明，包含cstring之后，就可以在程序中使⽤C语⾔⻛格的strcpy之类的函数。<br />string是C</ins>中string类模板的声明</li><li>CString是MFC中定义的字符串类，MFC中很多类及函数都是以CString为参数的</li></ul></blockquote><h4 id="21-浅拷贝和深拷贝的区别"><a class="markdownIt-Anchor" href="#21-浅拷贝和深拷贝的区别"></a> 21、浅拷贝和深拷贝的区别？</h4><blockquote><p>在某些情况下，类内的成员变量需要动态开辟堆内存，如果实行按位拷贝，就可能会出现两个对象里面的成员变量指针指向同一块内存区域。当回收其中一个对象时，该对象成员变量所指向的内存区域也将回收，会导致另一个对象存在野指针的情况。非常危险。深拷贝和浅拷贝可以简单理解为：如果一个类拥有资源，当这个类的对象发生复制过程的时候，资源重新分配，这个过程就是深拷贝，反之，没有重新分配资源，就是浅拷贝。</p></blockquote><h4 id="22-比较值传递和引用传递的相同点与不同点"><a class="markdownIt-Anchor" href="#22-比较值传递和引用传递的相同点与不同点"></a> 22、比较值传递和引用传递的相同点与不同点。</h4><blockquote><ul><li>值传递是指当发生函数调用时，给形参分配内存空间，并用实参来初始化形参（直接将实参的值传递给形参）。这一过程是参数值的单向传递过程，一旦形参获得了值便与实参脱离关系，此后无论形参发生了怎样的改变，都不会影响到实参。</li><li>引用传递将引用作为形参，在执行主调函数中的调用语句时，系统自动用实参来初始化形参。这样形参就成为实参的一个别名，对形参的任何操作也就直接作用于实参。</li></ul></blockquote><h4 id="23-什么叫内联函数它有哪些特点"><a class="markdownIt-Anchor" href="#23-什么叫内联函数它有哪些特点"></a> 23、什么叫内联函数?它有哪些特点？</h4><blockquote><p>定义时使用关键字 inline 的函数叫做内联函数；编译器在编译时在调用处用函数体进行替换,节省了参数传递、控制转移等开销；内联函数体内不能有循环语句和 switch 语句；内联函数的定义必须出现在内联函数第一次被调用之前；对内联函数不能进行异常接口声明</p></blockquote><h4 id="24-什么叫复制构造函数复制构造函数何时被调用"><a class="markdownIt-Anchor" href="#24-什么叫复制构造函数复制构造函数何时被调用"></a> 24、什么叫复制构造函数？复制构造函数何时被调用？</h4><blockquote><p>复制构造函数是一种特殊的构造函数，具有一般构造函数的所有特性，其形参是本类的对象的引用。其作用是使用一个已经存在的对象（由复制构造函数的参数指定），去初始化同类的一个新对象。<br />（1） 当用类的一个对象去初始化该类的另一个对象时；<br />（2） 如果函数的形参是类的对象，调用函数时进行形参和实参结合时；<br />（3） 如果函数的返回值是类的对象，函数执行完成返回调用者时。</p></blockquote><h4 id="25-复制构造函数与赋值运算符有何不同"><a class="markdownIt-Anchor" href="#25-复制构造函数与赋值运算符有何不同"></a> 25、复制构造函数与赋值运算符（=）有何不同？</h4><blockquote><ul><li>从概念上区分：复制构造函数是构造函数，而赋值操作符属于操作符重载范畴，它通常是类的成员函数</li><li>从原型上来区分：复制构造函数原型 ClassType(const ClassType &amp;);无返回值；赋值操作符原型 ClassType&amp; operator=(const ClassType &amp;);返回值为 ClassType 的引用，便于连续赋值操作</li><li>从使用的场合来区分：复制构造函数用于产生对象，它用于以下几个地方：函数参数为类的值类型时、函数返回值为类类型时以及初始化语句</li></ul></blockquote><h4 id="26-什么叫做可见性可见性的一般规则是什么"><a class="markdownIt-Anchor" href="#26-什么叫做可见性可见性的一般规则是什么"></a> 26、什么叫做可见性？可见性的一般规则是什么？</h4><blockquote><p>可见性是标识符是否可以引用的问题；可见性的一般规则是：标识符要声明在前，引用在后，在同一作用域中，不能声明同名<br />的标识符。对于在不同的作用域声明的标识符，遵循的原则是：若有两个或多个具有包含关系的作用域，外层声明的标识符如果在内层没有声明同名标识符时仍可见，如果内层声明了同名标识符则外层标识符不可见。</p></blockquote><h4 id="27-什么叫静态数据成员他有何特点"><a class="markdownIt-Anchor" href="#27-什么叫静态数据成员他有何特点"></a> 27、什么叫静态数据成员？他有何特点？</h4><blockquote><p>类的静态数据成员是类的数据成员的一种特例，采用 static 关键字来声明。对于类的普通数据成员，每一个类的对象都拥有一个拷贝，就是说每一个对象的同名数据成员可以分别存储不同的值，这也是保证对象拥有区别于其他对象的特征的需要，但是静态数据成员，每个类只要一个拷贝，由所有该类的对象共同维护和使用，这个共同维护，使用也就实现了同一类的不同对象之间的数据共享。</p></blockquote><h4 id="28-什么叫静态函数成员他有何特点"><a class="markdownIt-Anchor" href="#28-什么叫静态函数成员他有何特点"></a> 28、什么叫静态函数成员？他有何特点？</h4><blockquote><p>使用 static 关键字声明的函数成员是静态的，静态函数成员属于整个类，被同一个类的所有对象共同维护，为这些所有对象共享。静态成员函数具有以下两个方面的好处，一是由于静态成员函数只能直接访问同一个类的静态数据成员，可以保证不会对该类的其余数据成员造成负面影响；二是同一个类只维护一个静态函数成员的拷贝，节约了系统的开销，提高程序的运行效率。</p></blockquote><h4 id="29-什么叫友元函数什么叫友元类"><a class="markdownIt-Anchor" href="#29-什么叫友元函数什么叫友元类"></a> 29、什么叫友元函数？什么叫友元类？</h4><blockquote><p>友元函数是使用关键字 friend 关键字声明的函数，它可以访问相应类的保护成员和私有成员。友元类是使用 friend 关键字声明的类，它的所有成员函数都是相应类的友元函数。友元不可继承，没有传递性。</p></blockquote><h4 id="30-在函数内部定义的普通局部变量和静态局部变量在功能上有何不同计算机底层对这两"><a class="markdownIt-Anchor" href="#30-在函数内部定义的普通局部变量和静态局部变量在功能上有何不同计算机底层对这两"></a> 30、在函数内部定义的普通局部变量和静态局部变量在功能上有何不同？计算机底层对这两</h4><p>类变量做了怎样的不同处理导致了这种差异？</p><blockquote><p>局部作用域中静态变量的特点是：它并不会随着每次函数调用而产生一个副本，也不会随着函数的返回而失效，定义时未指定初值的基本类型静态变量，会被以 0 值初始化；局部作用域的全部变量诞生于声明点，结束于声明所在的块执行完毕之时，并且不指定初值，意味初值不确定。普通局部变量存放于栈区，超出作用域后，变量被撤销，其所占的内存也被回收；静态局部变量存放于静态数据存储区，全局可见，但是作用域是局部作用域，超出作用域后变量仍然存在。</p></blockquote><h4 id="31-引用和指针有何区别何时只能使用指针而不能使用引用"><a class="markdownIt-Anchor" href="#31-引用和指针有何区别何时只能使用指针而不能使用引用"></a> 31、引用和指针有何区别？何时只能使用指针而不能使用引用？</h4><blockquote><ul><li>引用是一个别名，不能为 NULL 值，不能被重新分配;</li><li>指针是一个存放地址的变量;</li><li>当需要对变量重新赋以另外的地址或赋值为 NULL 时只能使用指针。引用是一个变量的别名，本身不单独分配自己的内存空间，而指针有自己的内存空间。</li></ul></blockquote><h4 id="32-比较类的-3-种继承方式之间的差别"><a class="markdownIt-Anchor" href="#32-比较类的-3-种继承方式之间的差别"></a> 32、比较类的 3 种继承方式之间的差别？</h4><blockquote><ul><li>公有继承，使得基类 public(公有)和 protected(保护)成员的访问属性在派生类中不变，而基类 private(私有)成员不可访问。</li><li>私有继承，使得基类 public(公有)和 protected(保护)成员都以 private(私有)成员身份出现在派生类中，而基类 private(私有)成员不可访问。</li><li>保护继承中，基类 public(公有)和 protected(保护)成员都以 protected(保护)成员身份出现在派生类中，而基类 private(私有)成员不可访问。</li></ul></blockquote><h4 id="33-什么叫虚基类有何作用"><a class="markdownIt-Anchor" href="#33-什么叫虚基类有何作用"></a> 33、什么叫虚基类？有何作用？</h4><blockquote><ul><li>当某类的部分或全部直接基类是从另一个基类派生而来，这些直接基类中，从上一级基类继承来的成员就拥有相同的名称，派生类的对象的这些同名成员在内存中同时拥有多个拷贝，我们可以使用作用域分辨符来唯一标识并分别访问它们。我们也可以将直接基类<br />的共同基类设置为虚基类，这时从不同的路径继承过来的该类成员在内存中只拥有一个拷贝，这样就解决了同名成员的唯一标识问题。</li><li>虚基类的声明是在派生类的定义过程，其语法格式为：</li><li>class 派生类名：virtual 继承方式 基类名</li><li>上述语句声明基类为派生类的虚基类，在多继承情况下，虚基类关键字的作用范围和继承方式关键字相同，只对紧跟其后的基类起作用。声明了虚基类之后，虚基类的成员在进一步派生过程中，和派生类一起维护一个内存数据拷贝。</li><li>虚基类就是为了解决多继承产生的二义性问题</li></ul></blockquote><h4 id="34-组合与继承有什么共同点和差异通过组合生成的类与被组合的类之间的逻辑关系是什"><a class="markdownIt-Anchor" href="#34-组合与继承有什么共同点和差异通过组合生成的类与被组合的类之间的逻辑关系是什"></a> 34、组合与继承有什么共同点和差异？通过组合生成的类与被组合的类之间的逻辑关系是什</h4><p>么？继承呢？</p><blockquote><ul><li>组合和继承它们都使得已有对象成为新对象的一部分，从而达到代码复用的目的。组合和继承其实反映了两种不同的对象关系。</li><li>组合反映的是“有一个”（has-s）的关系，如果类 B 中存在一个类 A 的内嵌对象，表示的是每一个 B 类型的对象都“有一个”A 类型的对象，A 类型的对象与 B 类型的对象是部分整体的关系。</li><li>继承反映的是“是一个”（is-a）的关系，在“是一个”关系中，如果类 A 是类 B 的公有基类，那么这表示每一个 B 类型的对象都“是一个”A 类型的对象，B 类型的对象与 A 类型的对象是特殊与一般的关系。</li></ul></blockquote><h4 id="35-基类与派生类的对象指针或引用之间哪些情况下可以隐含转换哪些情况下可以显示转换在涉及多重继承或虚继承的情况下在转换时会面临哪些新问题"><a class="markdownIt-Anchor" href="#35-基类与派生类的对象指针或引用之间哪些情况下可以隐含转换哪些情况下可以显示转换在涉及多重继承或虚继承的情况下在转换时会面临哪些新问题"></a> 35、基类与派生类的对象，指针或引用之间，哪些情况下可以隐含转换，哪些情况下可以显示转换？在涉及多重继承或虚继承的情况下，在转换时会面临哪些新问题？</h4><blockquote><p>派生类指针可以隐含转换为基类指针，而基类指针要想转换为派生类指针，则转换一定要显示地进行。因为从特殊的指针转换到一般的指针时安全的，因此允许隐含转换；从一般的指针转换到特殊的指针是不安全的，因此只能显示地转换。基类对象一般无法被显式转换<br />为派生类对象。在多重继承情况下，执行基类指针到派生类指针的显式转换时，有时需要将指针所存储的地址值进行调整后才能得到新指针的值。但是，如果 A 类型是 B 类型的虚拟基类，虽然 B 类型的指针可以隐含转换为 A 类型，但是 A 类型指针却无法通过 static_case隐含转换为 B 类型的指针。</p></blockquote><h4 id="36-什么叫做多态性在-c种是如何实现多态的"><a class="markdownIt-Anchor" href="#36-什么叫做多态性在-c种是如何实现多态的"></a> 36、什么叫做多态性？在 C++种是如何实现多态的？</h4><blockquote><ul><li>多态是指同样的消息被不同类型的对象接收时导致完全不同的行为，是对类的特定成员函数的再抽象。C++支持重载多态，强制多态，包含多态和参数多态。</li><li>在基类中声明相应的函数为 virtual 型，然后在派生类中实现该函数，这样就可以通过基类指针调用派生类对象的函数，实现了运行时动态绑定，即多态的功能。</li></ul></blockquote><h4 id="37-什么叫抽象类抽象类有何作用抽象类的派生类是否一定要给出纯虚函数的实现"><a class="markdownIt-Anchor" href="#37-什么叫抽象类抽象类有何作用抽象类的派生类是否一定要给出纯虚函数的实现"></a> 37、什么叫抽象类？抽象类有何作用？抽象类的派生类是否一定要给出纯虚函数的实现？</h4><blockquote><p>带有纯虚函数的类是抽象类。其主要作用是通过它为一个类族建立一个公共的接口，使他们能够更有效地发挥多态特性。抽象类声明了一个类族派生类的共同接口，而接口的完整实现，即纯虚函数的函数体，要由派生类自己定义。抽象类派生出新的类之后，如果派生类给出所有纯虚函数的函数实现，这个派生类就可以定义自己的对象，因而不再是抽象类；反之，如果派生类没有给出全部纯虚函数的实现，此时的派生类仍然是一个抽象类。</p></blockquote><h4 id="38-在-c中能否声明虚构造函数为什么能否声明虚析构函数有何用途"><a class="markdownIt-Anchor" href="#38-在-c中能否声明虚构造函数为什么能否声明虚析构函数有何用途"></a> 38、在 C++中，能否声明虚构造函数？为什么？能否声明虚析构函数？有何用途？</h4><blockquote><p>在 C++中，不能声明虚构造函数，多态是不同的对象对同一消息有不同的行为特性，虚函数作为运行过程中多态的基础，主要是针对对象的，而构造函数是在对象产生之前运行的，因此虚构造函数是没有意义的；可以声明虚析构函数，析构函数的功能是在该类对象消亡之前进行一些必要的清理工作，如果一个类的析构函数是虚函数，那么，由它派生而来的所有子类的析构函数也是虚函数。析构函数设置为虚函数之后，在使用指针引用时可以动态联编，实现运行时的多态，保证使用基类的指针就能够调用适当的析构函数针对不同的对象进行清理工作。</p></blockquote><h4 id="39-什么叫做流流的提取和插入是指什么io-流在-c中起着怎样的作用"><a class="markdownIt-Anchor" href="#39-什么叫做流流的提取和插入是指什么io-流在-c中起着怎样的作用"></a> 39、什么叫做流？流的提取和插入是指什么？I/O 流在 C++中起着怎样的作用？</h4><blockquote><p>流是一种抽象，它负责在数据的生产者和数据的消费者之间建立联系，并管理数据的流动，一般意义下的读操作在流数据抽象中被称为（从流中）提取，写操作被称为（向流中）插入。操作系统是将键盘、屏幕、打印机和通信端口作为扩充文件来处理的，I/O 流类就是用来与这些扩充文件进行交互，实现数据的输入与输出。</p></blockquote><h4 id="40-什么叫做异常什么叫做异常处理"><a class="markdownIt-Anchor" href="#40-什么叫做异常什么叫做异常处理"></a> 40、什么叫做异常？什么叫做异常处理？</h4><blockquote><p>当一个函数在执行的过程中出现了一些不平常的情况，或运行结果无法定义的情况，使得操作不得不被中断时，我们说出现了异常。异常通常是用 throw 关键字产生的一个对象，用来表明出现了一些意外的情况。我们在设计程序时，就要充分考虑到各种意外情况，并给与恰当的处理。这就是我们所说的异常处理。</p></blockquote><h4 id="41-比较函数重载和虚函数在概念和使用方式方面有什么区别"><a class="markdownIt-Anchor" href="#41-比较函数重载和虚函数在概念和使用方式方面有什么区别"></a> 41、比较函数重载和虚函数在概念和使用方式方面有什么区别？</h4><blockquote><ul><li>函数重载可以用于普通函数（非成员的函数）和类的成员函数，而虚函数只能用于类的成员函数。</li><li>函数重载可以用于构造函数，而虚函数不能用于构造函数。</li><li>如果对成员函数进行重载，则重载的函数与被重载的函数应当都是同一类中的成员函数，不能分属于两个不同继承层次的类。函数重载是横向的重载。虚函数是对同一类族中的基类和派生类的同名函数的处理，即允许在派生类中对基类的成员函数重新定义。虚函数的作用是处理纵向的同名函数。</li><li>重载的函数必须具有相同的函数名，但函数的参数个数和参数类型二者中至少有一样不同，否则在编译时无法区分它们。而虚函数则要求再同一类族中的所有虚函数不仅函数名相同，而且要求函数类型、函数的参数个数和参数类型都全部相同，否则就不是重定义了。也就不是虚函数了。</li><li>函数重载是在程序编译阶段确定操作的对象的，属静态关联。虚函数是在程序运行阶段确定操作的对象的，属动态关联。</li></ul></blockquote><h4 id="42-比较-class-和-struct-结构体的异同"><a class="markdownIt-Anchor" href="#42-比较-class-和-struct-结构体的异同"></a> 42、比较 class 和 struct 结构体的异同</h4><blockquote><p>不同之处：</p><ul><li>默认成员访问权限不同，struct 默认是 public，而 class 默认是 private。</li><li>默认继承方式不同，struct 默认是 public，而 class 默认是 private。</li><li>在定义模板参数时可以用 class 但不能用 struct。<br />相同之处在于：都可以包含成员函数，都可以实现继承，都可以实现多态。</li></ul></blockquote><h4 id="43-const-和-static-作用"><a class="markdownIt-Anchor" href="#43-const-和-static-作用"></a> 43、const 和 static 作用</h4><p>const：</p><blockquote><ul><li>定义 const 常量，具有不可变性，保护被修饰的东西。防止意外修改，增强程序的健壮性。</li><li>便于类型检查，使编译器对处理内容有更多的了解。</li><li>可以避免意义模糊的数字出现，也便于进行参数的修改。同宏定义一样，可以做到不变则以，一变都变。</li><li>const 定义的常量在程序运行过程中只有一份拷贝，而宏定义却又若干份拷贝。</li></ul></blockquote><p>static:</p><blockquote><ul><li>作为类的静态数据成员：被类的所有对象共同拥有，在内存中只有一份拷贝。在类内声明，在类外初始化。</li><li>在全局变量前加上 static 关键字，该变量被定义为一个全局变量，特点：<br />a) 变量在全局数据区分配内存<br />b) 如果不显示初始化，则隐式的初始化为 0<br />c) 作用域仅限于本文件内</li><li>在局部变量前加 static 关键字，该变量被定义为静态局部变量，特点：<br />a) 在全局数据区分配内存<br />b) 如果不显示初始化，则隐式的初始化为 0<br />c) 始终驻留在全局数据区，直到程序结束。作用域仅限于函数体内，当函数执行完后作用域随之消失。</li><li>静态函数，特点：<br />a) 静态函数只能在本源文件中使用<br />b) 在文件作用域下声明的 inline 函数默认是 static 的</li></ul></blockquote><h4 id="44-析构函数带-virtual-和-不带-virtual-的区别"><a class="markdownIt-Anchor" href="#44-析构函数带-virtual-和-不带-virtual-的区别"></a> 44、析构函数带 virtual 和 不带 virtual 的区别</h4><blockquote><p>如果基类要被派生，则析构函数一定要带 virtual。否则，通过基类指针指向派生类对象后，删除该指针时并不会释放派生类对象的空间。也即，不会调用派生类的析构函数。不带 virtual 的几种情况：<br />1) 作为非公有基类<br />2) 不作为接口使用的基类<br />3) 可以保证这个类不被 public 继承<br />4) 如果他的所有派生类的 virtual 函数都是什么都不做<br />5) 如果不需要基类指针指向派生类对象</p></blockquote><h4 id="45-重写重载和隐藏的区别"><a class="markdownIt-Anchor" href="#45-重写重载和隐藏的区别"></a> 45、重写，重载和隐藏的区别？</h4><blockquote><ul><li>重载：在一个类中的同名函数，但参数列表不同，函数的返回值相同。</li><li>隐藏：派生类的函数屏蔽了与其同名的父类函数</li><li>重写（覆盖）：父类和子类存在相同的函数，包括返回值，参数列表均相同，父类的该函数必须含有 virtual 关键字。</li></ul></blockquote><h4 id="46-c中的四个默认的函数"><a class="markdownIt-Anchor" href="#46-c中的四个默认的函数"></a> 46、C++中的四个默认的函数</h4><blockquote><ul><li>构造函数：先基类后派生类</li><li>拷贝函数：对象被创建时调用</li><li>调用拷贝构造函数的情况：<br />a) 一个对象以值传递的方式传入函数体<br />b) 一个对象以值传递的方式从函数返回<br />c) 一个对象需要通过另外一个对象初始化</li><li>析构函数：每个类只有一个析构函数，</li><li>赋值函数：</li></ul></blockquote><h4 id="47-函数模板和函数重载的区别与联系区别"><a class="markdownIt-Anchor" href="#47-函数模板和函数重载的区别与联系区别"></a> 47、函数模板和函数重载的区别与联系区别：</h4><p>区别：</p><blockquote><ul><li>函数重载：C++允许使用同一个函数名，不同的参数个数和参数类型来定义多个函数。重载函数的参数个数，类型，顺序至少有一个不同。返回值可以相同，也可以不同。</li><li>函数模板：是对一类同构函数的抽象定义，并不是具体的函数，函数模板的定义被编译时不会产生任何可执行的代码。</li></ul></blockquote><p>联系：</p><blockquote><p>针对不同类型的数据，但实现相同功能的函数重载可以通过函数模板来替代。</p></blockquote><h4 id="48-怎样区别虚函数和纯虚函数两者都有什么作用"><a class="markdownIt-Anchor" href="#48-怎样区别虚函数和纯虚函数两者都有什么作用"></a> 48、怎样区别虚函数和纯虚函数？两者都有什么作用</h4><blockquote><ul><li>纯虚函数是在基类中声明的虚函数，在基类中没有定义。在基类中实现纯虚函数的方法是在函数原型后加“=0。虚函数可以实现也可以不实现。</li><li>定义纯虚函数是为了实现一个接口，起到了一个规范的作用。规范继承这个类的程序员必须实现这个接口。声明了纯虚函数的类为抽象类，不能实例化对象。</li><li>定义虚函数是为了允许用基类的指针来调用子类的这个函数。</li><li>抽象类的作用：将有关的操作作为一个接口组织在一个继承层次结构中，由他来为派生类提供一个公共的根。派生类将具体实现在其基类中作为接口的操作。</li></ul></blockquote><h4 id="49-面向对象程序接口与实现方法分离有什么好处"><a class="markdownIt-Anchor" href="#49-面向对象程序接口与实现方法分离有什么好处"></a> 49、面向对象程序“接口与实现方法分离”，有什么好处</h4><blockquote><p>接口与实现分离技术可以只把接口暴露给用户，具体的实现细节隐藏起来，当需要改动代码时，只要在实现部分修改后编译，用户无需再编译自己的项目。</p></blockquote><h4 id="50-c中显示类型转换"><a class="markdownIt-Anchor" href="#50-c中显示类型转换"></a> 50、C++中显示类型转换</h4><blockquote><ul><li>static_cast：最常用的类型转换，提供基本数据类型之间的转换操作。</li><li>const_cast：可以把 const 类型的指针转换为非 const 类型的指针。</li><li>reinterpret_cast：解释的意思，主要用于不相关类型之间的转换。目标和原始值之间至少有相同的位数，我们可以将转换之后的值再转换回去，而不像其它 3 种类型可能会导致精度丢失</li><li>dynamic_cast：运行时检查该转换是否类型安全，但只有在多态类型时合法，主要用于类层次间的上行和下行转换，还可以用于类之间的交叉转换。在进行类层次间的上行转换时和 static_cast 效果一样，进行下行转换时，具有类型检查的功能，比static_cast 更安全。</li></ul></blockquote><h4 id="51-delete-和-delete-的区别"><a class="markdownIt-Anchor" href="#51-delete-和-delete-的区别"></a> 51、 delete 和 delete [] 的区别？</h4><blockquote><ul><li>delete ptr 代表用来释放内存，且只用来释放 ptr 指向的内存。</li><li>delete[] rg 用来释放 rg 指向的内存！！还逐一调用数组中每个对象的析构函数</li><li>对于像 int/char/long/int*/struct 等等简单数据类型，由于对象没有 destructor，所以用 delete 和 delete [] 是一样的！但是如果是 C++对象数组就不同了！</li></ul></blockquote><h4 id="52-存储类别说明符可划分为哪两类"><a class="markdownIt-Anchor" href="#52-存储类别说明符可划分为哪两类"></a> 52、存储类别说明符可划分为哪两类。</h4><blockquote><p>静态存储类别（static，extern）和自动存储类别（auto，register）。这样的变量在程序执行进入到定义它们的程序块时创建，在程序块激活时存在，在程序块退出时销毁。</p></blockquote>]]></content>
    
    
    <summary type="html">面向对象的程序设计</summary>
    
    
    
    <category term="C++" scheme="https://guyinga.top/categories/C/"/>
    
    
    <category term="C++" scheme="https://guyinga.top/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>Linux 磁盘扩容</title>
    <link href="https://guyinga.top/9a2ddb4f1c5f/"/>
    <id>https://guyinga.top/9a2ddb4f1c5f/</id>
    <published>2021-05-09T16:00:00.000Z</published>
    <updated>2022-11-14T07:34:57.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="azure-linux-磁盘扩容"><a class="markdownIt-Anchor" href="#azure-linux-磁盘扩容"></a> Azure Linux 磁盘扩容</h2><p>进入 azure 改磁盘大小,重启后进入系统会发现磁盘大小没变，因为没扩容。</p><p>本系统为centos7</p><h4 id="安装-growpart"><a class="markdownIt-Anchor" href="#安装-growpart"></a> 安装 growpart</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install -y epel-release</span><br></pre></td></tr></table></figure><h4 id="安装-growpart-2"><a class="markdownIt-Anchor" href="#安装-growpart-2"></a> 安装 growpart</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install -y cloud-utils</span><br></pre></td></tr></table></figure><h4 id="修改系统语言为为英文语言与编码"><a class="markdownIt-Anchor" href="#修改系统语言为为英文语言与编码"></a> 修改系统语言为为英文语言与编码</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">LANG=en_US.UTF-8</span><br></pre></td></tr></table></figure><h4 id="扩-容块设备并重启"><a class="markdownIt-Anchor" href="#扩-容块设备并重启"></a> 扩-容块设备并重启</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">growpart /dev/sda 2</span><br><span class="line">reboot</span><br></pre></td></tr></table></figure><h4 id="重启后执行"><a class="markdownIt-Anchor" href="#重启后执行"></a> 重启后执行</h4><h5 id="xfs-文件系统-azure"><a class="markdownIt-Anchor" href="#xfs-文件系统-azure"></a> xfs 文件系统 (azure)</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">xfs_growfs /dev/sda2</span><br></pre></td></tr></table></figure><h5 id="ext4-文件系统"><a class="markdownIt-Anchor" href="#ext4-文件系统"></a> ext4 文件系统</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">resize2fs /dev/sda2 </span><br></pre></td></tr></table></figure><h4 id="查看是否-ok"><a class="markdownIt-Anchor" href="#查看是否-ok"></a> 查看是否 ok</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">df</span> -TH</span><br></pre></td></tr></table></figure><h2 id="阿里云-重装系统与磁盘扩容"><a class="markdownIt-Anchor" href="#阿里云-重装系统与磁盘扩容"></a> 阿里云 重装系统与磁盘扩容</h2><h4 id="重装系统一键脚本"><a class="markdownIt-Anchor" href="#重装系统一键脚本"></a> 重装系统一键脚本</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">LANG=en_US.UTF-8</span><br><span class="line">wget --no-check-certificate -O AutoReinstall.sh https://git.io/AutoReinstall.sh &amp;&amp; bash AutoReinstall.sh</span><br></pre></td></tr></table></figure><h4 id="设置系统语言"><a class="markdownIt-Anchor" href="#设置系统语言"></a> 设置系统语言</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">LANG=en_US.UTF-8</span><br></pre></td></tr></table></figure><h4 id="设置1"><a class="markdownIt-Anchor" href="#设置1"></a> 设置1</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">growpart /dev/vda 1</span><br></pre></td></tr></table></figure><h4 id="设置2"><a class="markdownIt-Anchor" href="#设置2"></a> 设置2</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">resize2fs /dev/vda1</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">Linux 磁盘扩容</summary>
    
    
    
    <category term="折腾" scheme="https://guyinga.top/categories/%E6%8A%98%E8%85%BE/"/>
    
    
    <category term="Azure" scheme="https://guyinga.top/tags/Azure/"/>
    
    <category term="Microsoft" scheme="https://guyinga.top/tags/Microsoft/"/>
    
  </entry>
  
  <entry>
    <title>Microsoft 365 E5 开发者</title>
    <link href="https://guyinga.top/f4756d7a12fe/"/>
    <id>https://guyinga.top/f4756d7a12fe/</id>
    <published>2021-04-26T06:12:39.000Z</published>
    <updated>2022-11-14T07:34:57.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="立即加入-microsoft-365-开发人员计划"><a class="markdownIt-Anchor" href="#立即加入-microsoft-365-开发人员计划"></a> 立即加入 Microsoft 365 开发人员计划</h3><ul><li>获取免费、可续订的 90 天 Microsoft 365 E5 开发人员订阅;</li><li>包括SharePoint、OneDrive、Outlook、Exchange、Teams、Planner、Word、Excel、PowerPoint；</li><li>订阅包含 25 个用于所有 Microsoft 365 应用的许可证</li><li>OneDrive每个用户的网盘容量上限为 5TB；</li></ul><p>申请链接：<a href="https://developer.microsoft.com/zh-cn/office/dev-program">https://developer.microsoft.com/zh-cn/office/dev-program</a><br />Microsoft 365 E5 开发者管理页： <a href="https://admin.microsoft.com/">https://admin.microsoft.com/</a></p><h3 id="网盘扩容"><a class="markdownIt-Anchor" href="#网盘扩容"></a> 网盘扩容</h3><p>打开 <a href="https://admin.onedrive.com">https://admin.onedrive.com</a> 登录之后在左方菜单中选择「存储」该项，将默认存储改为 5120，即 5TB。<br />但是管理员账号的容量此刻依旧为1TB，接下来更改管理员容量。</p><h3 id="修改全局管理员自身的5t容量"><a class="markdownIt-Anchor" href="#修改全局管理员自身的5t容量"></a> 修改全局管理员自身的5T容量</h3><ul><li>我们先安装最新的 SharePoint Online Management Shell → <a href="https://www.microsoft.com/zh-cn/download/details.aspx?id=35588">下载地址</a>；</li><li>点击电脑左下角开始按钮，搜索PowerShell，然后单击Windows PowerShell，此时会弹出一个命令框。<br />依次输入命令：</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#adminUPN为管理员邮箱，orgName为你设置的组织名</span><br><span class="line">$adminUPN=&quot;admin@weijiajin.onmicrosoft.com&quot;</span><br><span class="line">$orgName=&quot;weijiajin&quot;</span><br><span class="line">#该步会弹出一个窗口，会要求你输入邮箱密码</span><br><span class="line">$userCredential = Get-Credential -UserName $adminUPN -Message &quot;Type the password.&quot;</span><br><span class="line">Connect-SPOService -Url https://$orgName-admin.sharepoint.com -Credential $userCredential</span><br><span class="line">#这里默认修改为5T，如果你要修改为其它的可自行修改，单位为M，最大可修改为5T</span><br><span class="line">Set-SPOTenant -OneDriveStorageQuota 5242880</span><br><span class="line">#将后面的地址修改成你的OneDrive网盘地址，地址仿照下面的即可</span><br><span class="line">Set-SPOSite -Identity https://weijiajin-my.sharepoint.com/personal/admin_weijiajin_onmicrosoft_com -StorageQuota 5242880</span><br></pre></td></tr></table></figure><p><strong>如果你要修改现有用户的容量的话，将最后一步的OneDrive网盘地址替换成你想修改的用户地址即可。</strong></p><h3 id="微软onedrive网盘免费升级到25t容量教程"><a class="markdownIt-Anchor" href="#微软onedrive网盘免费升级到25t容量教程"></a> 微软OneDrive网盘免费升级到25T容量教程</h3><p>如果OneDrive 5T不够用，这里分享个免费升级25T的方法，也是微软很早就出的一个政策，部分订阅的OneDrive网盘使用量超过90%的可免费申请提高容量到25T，有需求的可以升级下。</p><h3 id="申请方法未试"><a class="markdownIt-Anchor" href="#申请方法未试"></a> 申请方法（未试）</h3><p>提示：以下申请操作都需要全局管理员操作，如果需求大，也可以给自己其它的账号也升级到25T。</p><ul><li><p>管理员登录后台→<a href="https://admin.microsoft.com/Adminportal/Home">传送门</a>，点击左侧支持-新建服务请求；</p></li><li><p>然后在帮助框写下： 请帮助我吧 <a href="mailto:admin@weijiajin.onmicrosoft.com">admin@weijiajin.onmicrosoft.com</a> 账户的 onedrive 容量升级至25T；</p></li><li><p>然后填上管理员邮箱，附件上传几张该账号容量超过90%的截图，包括账户信息；</p></li><li><p>最后发送即可，截图不规范的，中途可能会有工作人员打电话要你重新发图片给他；</p></li><li><p>最后等一天，成功的邮件就会发给你，然后这时候你就照着邮件给的方法自行升级到25T。</p></li></ul><h3 id="microsoft-365-e5-开发者-开源自动订阅程序"><a class="markdownIt-Anchor" href="#microsoft-365-e5-开发者-开源自动订阅程序"></a> Microsoft 365 E5 开发者 开源自动订阅程序</h3><p>教程地址：<a href="https://qyi.io/archives/687.html">https://qyi.io/archives/687.html</a><br />项目地址：<a href="https://github.com/luoye663/e5">https://github.com/luoye663/e5</a><br />自动订阅程序： <a href="https://e5.qyi.io/">https://e5.qyi.io/</a></p><h3 id="总结"><a class="markdownIt-Anchor" href="#总结"></a> 总结</h3><p>Microsoft 365 E5 开发者 主要可以白嫖Office与onedrive 5T大容量还可以存储一些大文件，下载也很方便，如果可以一直自动续费那是相当不错的，值得推荐使用。比国内的网盘好太多，速度也很不错！office也没有广告，一些想用正版Office也很推荐。</p><h3 id="后续补充"><a class="markdownIt-Anchor" href="#后续补充"></a> 后续补充</h3><div class="tag-plugin timeline"><div class="timenode" index="0"><div class="header"><p>2021 年 6 月 16 日</p></div><div class="body fs14"><p>续订成功</p><div class="tag-plugin image"><div class="image-bg"><img src="/images/文章图片/20210426-Microsoft365/365renew.png" fancybox="true" style="width:500px;"/></div></div></div></div></div>]]></content>
    
    
    <summary type="html">立即加入 Microsoft 365 开发人员计划，获取免费、可续订的 90 天 Microsoft 365 E5 开发人员订阅。</summary>
    
    
    
    <category term="折腾" scheme="https://guyinga.top/categories/%E6%8A%98%E8%85%BE/"/>
    
    
    <category term="onedrive" scheme="https://guyinga.top/tags/onedrive/"/>
    
    <category term="microsoft" scheme="https://guyinga.top/tags/microsoft/"/>
    
  </entry>
  
  <entry>
    <title>GitHub Actions 实现 Hexo 自动部署</title>
    <link href="https://guyinga.top/940556775882/"/>
    <id>https://guyinga.top/940556775882/</id>
    <published>2021-04-20T16:00:00.000Z</published>
    <updated>2022-11-15T00:24:13.504Z</updated>
    
    <content type="html"><![CDATA[<h3 id="hexo"><a class="markdownIt-Anchor" href="#hexo"></a> Hexo</h3><p>首先我们先要在本地确保 Hexo 是可以正确运行的，比如：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo deploy</span><br></pre></td></tr></table></figure><p>确认 _config.yml 文件中有类似如下的 GitHub Pages 配置：</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repository:</span> <span class="string">https://github.com/guyingd/guyingd.github.io.git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">main</span></span><br></pre></td></tr></table></figure><blockquote><p>注意：请将 repository 修改为你自己的仓库地址。</p></blockquote><h3 id="生成秘钥"><a class="markdownIt-Anchor" href="#生成秘钥"></a> 生成秘钥</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -b 4096 -C <span class="string">&quot;Hexo Deploy Key&quot;</span> -f github-deploy-key -N <span class="string">&quot;&quot;</span></span><br></pre></td></tr></table></figure><p>当前目录生成两个文件：</p><ul><li>github-deploy-key —— 私钥</li><li>github-deploy-key.pub —— 公钥</li></ul><h3 id="github配置秘钥"><a class="markdownIt-Anchor" href="#github配置秘钥"></a> GitHub配置秘钥</h3><p><strong>把私钥放到我们存放 Hexo 原始文件的代码仓库里面，用于触发 Actions 时使用;</strong><br /><strong>把公钥放到 GitHub Pages 对应的代码仓库里面，用于 Hexo 部署时的写入工作</strong></p><h4 id="配置私钥"><a class="markdownIt-Anchor" href="#配置私钥"></a> 配置私钥</h4><ul><li>首先在 GitHub 上打开保存 Hexo 的仓库，访问 Settings -&gt; Secrets，然后选择 New secret;</li><li>名字部分填写：HEXO_DEPLOY_KEY，注意大小写，这个后面的 GitHub Actions Workflow 要用到;</li><li>在 Value 的部分填入 github-deploy-key 中的内容。</li></ul><h4 id="添加公钥"><a class="markdownIt-Anchor" href="#添加公钥"></a> 添加公钥</h4><ul><li>接下来我们需要访问存放网页的仓库，也就是 Hexo 部署以后的仓库，访问 Settings -&gt; Deploy keys;</li><li>按 Add deploy key 来添加一个新的公钥；</li><li>在 Title中输入：HEXO_DEPLOY_PUB 字样，当然也可以填写其它自定义的名字;</li><li>在 Key 中粘贴 github-deploy-key.pub文件的内容。</li></ul><blockquote><p>注意：一定要勾选 Allow write access 来打开写权限，否则无法写入会导致部署失败。</p></blockquote><h3 id="创建-workflow"><a class="markdownIt-Anchor" href="#创建-workflow"></a> 创建 Workflow</h3><p><strong>在 Hexo 的仓库中创建一个新文件：.github/workflows/auto_deploy.yml，文件的内容如下:</strong></p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">auto</span> <span class="string">deploy</span> <span class="comment"># workflow name</span></span><br><span class="line"></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  [<span class="string">push</span>] <span class="comment"># 触发事件</span></span><br><span class="line"></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">build:</span> <span class="comment"># job1 id</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span> <span class="comment"># 运行环境为最新版 Ubuntu</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">auto</span> <span class="string">deploy</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Checkout</span> <span class="comment"># step1 获取源码</span></span><br><span class="line">      <span class="attr">uses:</span> <span class="string">actions/checkout@v1</span> <span class="comment"># 使用 actions/checkout@v1</span></span><br><span class="line">      <span class="attr">with:</span> <span class="comment"># 条件</span></span><br><span class="line">        <span class="attr">submodules:</span> <span class="literal">true</span> <span class="comment"># Checkout private submodules(themes or something else). 当有子模块时切换分支？</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Setup</span> <span class="string">Node.js</span> <span class="number">10.</span><span class="string">x</span></span><br><span class="line">      <span class="attr">uses:</span> <span class="string">actions/setup-node@master</span></span><br><span class="line">      <span class="attr">with:</span></span><br><span class="line">        <span class="attr">node-version:</span> <span class="string">&quot;10.x&quot;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Generate</span> <span class="string">Public</span> <span class="string">Files</span></span><br><span class="line">      <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">        npm i</span></span><br><span class="line"><span class="string">        npm install hexo-cli -g</span></span><br><span class="line"><span class="string">        hexo clean &amp;&amp; hexo generate</span></span><br><span class="line"><span class="string"></span>    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Deploy</span></span><br><span class="line">      <span class="attr">uses:</span> <span class="string">peaceiris/actions-gh-pages@v3</span></span><br><span class="line">      <span class="attr">with:</span></span><br><span class="line">        <span class="attr">deploy_key:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.HEXO_DEPLOY_KEY</span> <span class="string">&#125;&#125;</span></span><br><span class="line">        <span class="attr">external_repository:</span> <span class="string">guyingd/guyingd.github.io</span></span><br><span class="line">        <span class="attr">publish_branch:</span> <span class="string">public</span></span><br><span class="line">        <span class="attr">publish_dir:</span> <span class="string">./public</span></span><br><span class="line">        <span class="attr">commit_message:</span> <span class="string">$&#123;&#123;</span> <span class="string">github.event.head_commit.message</span> <span class="string">&#125;&#125;</span></span><br><span class="line">        <span class="attr">user_name:</span> <span class="string">&#x27;github-actions[bot]&#x27;</span></span><br><span class="line">        <span class="attr">user_email:</span> <span class="string">&#x27;github-actions[bot]@users.noreply.github.com&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="总结"><a class="markdownIt-Anchor" href="#总结"></a> 总结</h3><p><strong>以上就是 GitHub Actions 自动部署 Hexo 到 GitHub Pages 的方法。</strong></p>]]></content>
    
    
    <summary type="html">GitHub Actions 自动部署 Hexo 到 GitHub Pages 的方法</summary>
    
    
    
    <category term="折腾" scheme="https://guyinga.top/categories/%E6%8A%98%E8%85%BE/"/>
    
    
    <category term="Hexo" scheme="https://guyinga.top/tags/Hexo/"/>
    
    <category term="GitHub" scheme="https://guyinga.top/tags/GitHub/"/>
    
  </entry>
  
  <entry>
    <title>CRC码计算及校验原理的最通俗诠释</title>
    <link href="https://guyinga.top/48f90e18fc3d/"/>
    <id>https://guyinga.top/48f90e18fc3d/</id>
    <published>2021-04-09T13:18:30.000Z</published>
    <updated>2022-11-14T07:34:57.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>CRC校验原理</strong><br />CRC校验原理看起来比较复杂，好难懂，因为大多数书上基本上是以二进制的多项式形式来说明的。其实很简单的问题，其根本思想就是先在要发送的帧后面附加一个数（这个就是用来校验的校验码，但要注意，这里的数也是二进制序列的，下同），生成一个新帧发送给接收端。当然，这个附加的数不是随意的，它要使所生成的新帧能与发送端和接收端共同选定的某个特定数整除（注意，这里不是直接采用二进制除法，而是采用一种称之为“模2除法”）。到达接收端后，再把接收到的新帧除以（同样采用“模2除法”）这个选定的除数。因为在发送端发送数据帧之前就已通过附加一个数，做了“去余”处理（也就已经能整除了），所以结果应该是没有余数。如果有余数，则表明该帧在传输过程中出现了差错。</p><p>【说明】“模2除法”与“算术除法”类似，但它既不向上位借位，也不比较除数和被除数的相同位数值的大小，只要以相同位数进行相除即可。模2加法运算为：1+1=0，0+1=1，0+0=0，无进位，也无借位；模2减法运算为：1-1=0，0-1=1，1-0=1，0-0=0，也无进位，无借位。相当于二进制中的逻辑异或运算。也就是比较后，两者对应位相同则结果为“0”，不同则结果为“1”。如100101除以1110，结果得到商为11，余数为1，如图所示。如11×11=101，如图所示。</p><p><img src="https://pic4.zhimg.com/80/v2-5b45e4b97f0eff80ff0d0c0a58385d97_1440w.jpg" alt="img" /></p><p>具体来说，CRC校验原理就是以下几个步骤：</p><p>（1）先选择（可以随机选择，也可按标准选择，具体在后面介绍）一个用于在接收端进行校验时，对接收的帧进行除法运算的除数（是二进制比较特串，通常是以多项方式表示，所以CRC又称多项式编码方法，这个多项式也称之为“生成多项式”）。</p><p>（2）看所选定的除数二进制位数（假设为k位），然后在要发送的数据帧（假设为m位）后面加上k-1位“0”，然后以这个加了k-1个“0“的新帧（一共是m+k-1位）以“模2除法”方式除以上面这个除数，所得到的余数（也是二进制的比特串）就是该帧的CRC校验码，也称之为FCS（帧校验序列）。但要注意的是，余数的位数一定要是比除数位数只能少一位，哪怕前面位是0，甚至是全为0（附带好整除时）也都不能省略。</p><p>（3）再把这个校验码附加在原数据帧（就是m位的帧，注意不是在后面形成的m+k-1位的帧）后面，构建一个新帧发送到接收端，最后在接收端再把这个新帧以“模2除法”方式除以前面选择的除数，如果没有余数，则表明该帧在传输过程中没出错，否则出现了差错。<br />通过以上介绍，大家一定可以理解CRC校验的原理，并且不再认为很复杂吧。</p><p>从上面可以看出，CRC校验中有两个关键点：一是要预先确定一个发送端和接收端都用来作为除数的二进制比特串（或多项式）；二是把原始帧与上面选定的除进行二进制除法运算，计算出FCS。前者可以随机选择，也可按国际上通行的标准选择，但最高位和最低位必须均为“1”，如在IBM的SDLC（同步数据链路控制）规程中使用的CRC-16（也就是这个除数一共是17位）生成多项式g（x）= x16 + x15 + x2 +1（对应二进制比特串为：11000000000000101）；而在ISO HDLC（高级数据链路控制）规程、ITU的SDLC、X.25、V.34、V.41、V.42等中使用CCITT-16生成多项式g（x）=x16 + x15 + x5 +1（对应二进制比特串为：11000000000100001）。<br /><strong>CRC校验码的计算示例</strong><br />由以上分析可知，既然除数是随机，或者按标准选定的，所以CRC校验的关键是如何求出余数，也就是CRC校验码。</p><p>下面以一个例子来具体说明整个过程。现假设选择的CRC生成多项式为G（X） = X4 + X3 + 1，要求出二进制序列10110011的CRC校验码。下面是具体的计算过程：<br />（1）首先把生成多项式转换成二进制数，由G（X） = X4 + X3 + 1可以知道（，它一共是5位（总位数等于最高位的幂次加1，即4+1=5），然后根据多项式各项的含义（多项式只列出二进制值为1的位，也就是这个二进制的第4位、第3位、第0位的二进制均为1，其它位均为0）很快就可得到它的二进制比特串为11001。<br />（2）因为生成多项式的位数为5，根据前面的介绍，得知CRC校验码的位数为4（校验码的位数比生成多项式的位数少1）。因为原数据帧10110011，在它后面再加4个0，得到101100110000，然后把这个数以“模2除法”方式除以生成多项式，得到的余数，即CRC校验码为0100，如图所示。注意参考前面介绍的“模2除法”运算法则。</p><p><img src="https://pic1.zhimg.com/v2-15db3e5f6ebd50ba931955b53b3c6dbc_r.jpg" alt="img" /></p><p>（3）把上步计算得到的CRC校验码0100替换原始帧101100110000后面的四个“0”，得到新帧101100110100。再把这个新帧发送到接收端。</p><p>（4）当以上新帧到达接收端后，接收端会把这个新帧再用上面选定的除数11001以“模2除法”方式去除，验证余数是否为0，如果为0，则证明该帧数据在传输过程中没有出现差错，否则出现了差错。 通过以上CRC校验原理的剖析和CRC校验码的计算示例的介绍，大家应该对这种看似很复杂的CRC校验原理和计算方法应该比较清楚了。</p><p>转自知乎：</p><p><a href="https://zhuanlan.zhihu.com/p/338068105">CRC码计算及校验原理的最通俗诠释 - 小太阳的文章 </a></p><p>2021年04月09日</p>]]></content>
    
    
    <summary type="html">CRC校验原理看起来比较复杂，好难懂，因为大多数书上基本上是以二进制的多项式形式来说明的。</summary>
    
    
    
    <category term="折腾" scheme="https://guyinga.top/categories/%E6%8A%98%E8%85%BE/"/>
    
    
    <category term="C++" scheme="https://guyinga.top/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>海明校验码是怎么实现的</title>
    <link href="https://guyinga.top/05d8712a0c40/"/>
    <id>https://guyinga.top/05d8712a0c40/</id>
    <published>2021-04-09T02:09:39.000Z</published>
    <updated>2022-11-14T07:34:57.000Z</updated>
    
    <content type="html"><![CDATA[<p>如何一步步推导出海明码。</p><p>先提一个基本中的基本，异或。异或是两个数字相异则为1，相同则为0。举例1异或0=1，0异或0=0，1异或1=0。</p><p>为什么要提异或呢，因为异或是校验中最为根本的一个东西。假设我有原码1111和错误传输1110以及正确传输1111，那么我怎么能隐藏数据内容直接更快更好的知道数据是否传输错误了呢？</p><p>按位异或，如果无错，则异或值必全为0。1111与1111的异或为0000，1111与1110的异或为0001，看出来了吧，异或在校验中有着极为基本的作用。</p><p>那么我们为什么要提出海明码？直接用奇偶校验不行吗？</p><p>不行，因为奇偶校验只能发现错误，不能追溯错误。所以我们提出了一个疑问，怎么能校验错误并寻找到错误的根源？（先讨论最基本的情况，即只发生一位错误）</p><p>那么将问题具体化就是：假设我要传输一个四位数据，想要对此数据进行校验并能够定位错误位置，我该如何设计？</p><p>首先考虑校验码的位数问题。</p><p>首先要明确的是校验码的位数加上数据的位数必须能够被校验码表示。即假设数据4位，校验码2位，则共有6位，但校验码2位只能标识4种状态，4&lt;6，不能表示清楚每一个位置。所以要增加校验码至3位。</p><p>但于此同时又有一个问题，假设我有5位数据，我可不可以使用3位校验码？5+3=2^3，看起来刚好能够表示每个位置的数据，但这是不可以的。比如我传输的数据是11111，结果传输错误，传输成了01111，那么这个时候我要表示第一位的数据传输错误，我的校验码应该是001，而不是000。此外，000还表示了数据无错，所以实际操作中我们计算可表示位数的时候是忽略掉全为0的一种情况。故校验码的位数加上数据位数应该小于等于校验码能表示位数（除去全0情况后的）。</p><p>解决了位数的问题，接下来要解决校验码放在哪的问题。</p><p>假设我把校验码放在编码的最前3位，数据放在后面4位。再假设我传输的数据是*** 1111（<em>表示校验码）。那么当我的数据位置传输错误后，如传输成为了</em>** 0111，那么我的校验码应该写成2进制的4，因为第4位出现了传输错误。所以整体表示成100 0111。但此时出现一个致命的问题：数据不出错的情况下，可能单纯的校验码传输错误了。也就是说，如果第1位的校验码传输错误时，传输结果为 100 1111。看到问题的所在了吗？根据我的校验码，我应该追溯第4位的传输错误，但是我的第4位是传输正确的，这也就导致了我无法真正的找到错误位。</p><p>那么该怎么设计呢？我们可以看到，纠错失败是因为歧义的问题，即无法分辨是校验码所表示位置传输错误还是校验码自身传输错误。那么取消掉歧义，让校验码的自身传输错误时恰好其位置表示是他自己，不就解决掉这个问题了吗？按照刚才的例子来讲，我们首先考虑三种校验码出错的情况，分别是001，010，100三种，那么很明显，我们直接把这三位校验码放到他所表示的位置中不就可以了吗？也就是将校验码放置到第1，第2，第4三个位置中，这样位置的表示与校验码的传输错误可以用同一个表示，不会导致前文说的纠错失败的问题。</p><p>好了，到这一步后，我们已经清楚了校验码的设计方式了，但是校验码怎么取值呢？上面所提到的是已知错误去判断校验码的取值，但实际中我们是反过来的过程，所以我们就要去考虑取值的问题。</p><p>先讲我们是怎么进行校验的，也就是校验的流程问题。</p><p>这一步我们先将校验码和数据部分分开，假设校验码是p，数据是d，然后我们的p是根据d在某种规则下得到的，那么我们只需要将接收到的数据部分按照规则重新计算后（即理论传输正确时校验码的值）与其校验码部分（实际传输的校验码的值）做异或运算，我们将这个异或运算的结果记为s，若结果全为0，则表示两者完全相同，若不全为0，我们还希望s恰好为传输错误的位置信息。即我们希望s=011时（s1=1，s2=1，s3=0），第3位的数据确认传输出错。（s1即为s的第一位，s2为第二位，d，p同理）</p><p>这里我们探讨的s其实就是上一阶段讨论校验码位置时的校验码值，因为它的实际意义就是某一位出现了错误，表示位置信息。（而p是实际上校验码位置应该填写的值）</p><p>那么接下来我们先来思考一个问题，s1=1代表什么？</p><p>这代表001，011，101，111位置中有一个必然出错了。也就是1，3，5，7位中有数据传输错误，s1=1。那我们又知道s1=（p1和d在p1下的规则运算后的异或），所以和p1有关的d就是抛开p1自身后的数据位数，即3，5，7位。</p><p>那么问题就简化了，我们需要将3，5，7位进行一种规则运算，使得3，5，7中一旦有一位发生了变化，他的规则运算结果就会由1变0，由0变1。</p><p>那么这种规则就是异或。3，5，7三位的异或将形成p1的值。如果其中1位发生了传输错误（或校验码本身第1位发生了传输错误），则按照异或规则形成的新p1必将与之前的p1相反，从而导致s1=1。</p><p>同样的，按照此理我们可以求出p2，p3的值。</p><p>再举p2的例子好了。s2=1代表着010 011 110 111中一个出错，即2，3，6，7四位中有一个出错。那么p2就应该是除了自己以外的3，6，7位进行异或运算后形成的结果。反过来说，如果3，6，7位发生传输错误（或校验码第2位发生了传输错误），则按照异或规则形成的新p2必与前p2相异，从而导致s2=1。</p><p>到此为止，对海明码的编码过程就结束了。后面举例如何校验码是如何验证的。</p><p>假设我传输的编码是1010010（正确的海明码)，结果传输成为了1110010，那么海明码将如何验证呢？</p><p>1110010 画线部分是校验码，即p1=0，p2=1，p3=0。</p><p>s1：d3异或d5异或d7等于0，0异或p1=0.</p><p>s2：d3异或d6异或d7等于0，0异或p2=1.</p><p>s3：d5异或d6异或d7等于1，1异或p3=1.</p><p>故110位置出错，即第6位出现错误。</p><p>转自知乎：</p><p><a href="https://www.zhihu.com/question/29169628/answer/837787585">海明校验码是怎么实现的？ - 沐温的回答</a></p><p>2021年04月09日</p>]]></content>
    
    
    <summary type="html">如何一步步推导出海明码</summary>
    
    
    
    <category term="折腾" scheme="https://guyinga.top/categories/%E6%8A%98%E8%85%BE/"/>
    
    
  </entry>
  
  <entry>
    <title>基于深度学习框架Tensorflow的成绩自动查询</title>
    <link href="https://guyinga.top/022ba103b947/"/>
    <id>https://guyinga.top/022ba103b947/</id>
    <published>2020-11-24T11:02:37.000Z</published>
    <updated>2022-11-14T07:34:57.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>项目地址(包含数据集)：<a href="https://github.com/feelheart7/Python">https://github.com/feelheart7/Python</a><br />项目地址(包含数据集，精简版，由于学校网页失效，精简只有深度学习核心部分)：<a href="https://github.com/feelheart7/tensorflow">https://github.com/feelheart7/tensorflow</a></p></blockquote><h4 id="项目介绍"><a class="markdownIt-Anchor" href="#项目介绍"></a> 项目介绍</h4><p>当考试结束后，有很多同学想及时知道自己的成绩，由于学校成绩在官网最新更新，其他平台查成绩有很大的延迟，所以迫不及待的同学需要去学校官网的教务处查询，过程操作不是很方便，每次凭运气查成绩。于是通过程序自动化操作，简化成绩查询过程，节省时间，提高效率。</p><h5 id="项目所需知识"><a class="markdownIt-Anchor" href="#项目所需知识"></a> 项目所需知识</h5><ul><li>图像数值处理</li><li>深度学习</li><li>tensorflow</li><li>python3.6</li><li>爬虫</li></ul><h4 id="项目优点"><a class="markdownIt-Anchor" href="#项目优点"></a> 项目优点</h4><ul><li>第一次查询全部成绩</li><li>最新成绩通过邮箱通知，最新成绩显示在邮箱标题</li><li>配置简单只需填写 ，学号、密码、和接受通知的邮箱</li></ul><h4 id="项目所需库"><a class="markdownIt-Anchor" href="#项目所需库"></a> 项目所需库</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 操作图片模块</span><br><span class="line">from PIL import Image</span><br><span class="line"># 第三方OCR调用（识别率不高）</span><br><span class="line">import pytesseract</span><br><span class="line"># 范围随机模块</span><br><span class="line">import random</span><br><span class="line"># 操作系统模块</span><br><span class="line">import os</span><br><span class="line"># 矩阵计算与tensorflow（深度学习框架）</span><br><span class="line">import numpy as np</span><br><span class="line">import tensorflow as tf</span><br><span class="line"># 爬虫模拟网页请求模块</span><br><span class="line">import requests</span><br><span class="line"># 调用系统浏览器</span><br><span class="line">import webbrowser</span><br><span class="line"># 爬取html指定内容</span><br><span class="line">from bs4 import BeautifulSoup</span><br><span class="line"># 正则模块</span><br><span class="line">import re</span><br><span class="line"># smtp邮箱</span><br><span class="line">import smtplib</span><br><span class="line">from email.mime.text import MIMEText</span><br><span class="line">from email.utils import formataddr</span><br><span class="line"># 时间模块，用于延迟</span><br><span class="line">import time</span><br><span class="line"># 下载图片模块</span><br><span class="line">from typing import Any</span><br><span class="line">from urllib.request import urlretrieve</span><br><span class="line"># TF_CPP_MIN_LOG_LEVEL默认值为 0 (显示所有logs)</span><br><span class="line"># 设置为 1 隐藏 INFO logs, 2 额外隐藏WARNING logs</span><br><span class="line"># 设置为3所有 ERROR logs也不显示</span><br><span class="line">os.environ[&#x27;TF_CPP_MIN_LOG_LEVEL&#x27;] = &#x27;2&#x27;</span><br></pre></td></tr></table></figure><h4 id="项目难点"><a class="markdownIt-Anchor" href="#项目难点"></a> 项目难点</h4><p>通过深度神经网络的验证码识别，目前我的验证码的识别率为97%，3万图片经过深度神经网络的训练，使用的是Google的神经网络框架tensorflow，如果还想提高识别率也是可以的，可以增加数据集，降低keep_prob的值（拟合度），达到99.9%是没有问题的。</p><blockquote><p>3万张的数据集并不是我手动码的，而是通过最开始我自己人工识别了1000张和我的好朋友刘雪峰200张作为最初数据集，开始训练的识别率只有20%左右，然后写了个函数将识别正确验证码储存，再进行训练，从而增大数据集和提高数据集（当识别率已经很高的时候，错误的图片再进行人工识别在训练可进一步提高识别率）。</p></blockquote><h4 id="多用户使用方法"><a class="markdownIt-Anchor" href="#多用户使用方法"></a> 多用户使用方法</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">info = [&#123;</span><br><span class="line">        &#x27;account&#x27;: &#x27;******,</span><br><span class="line">        &#x27;password&#x27;: &#x27;******&#x27;,</span><br><span class="line">        &#x27;email&#x27;: &#x27;*****@qq.com&#x27;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">        &#x27;account&#x27;: &#x27;******</span><br><span class="line">        &#x27;password&#x27;: &#x27;***&#x27;,</span><br><span class="line">        &#x27;email&#x27;: &#x27;*****@qq.com&#x27;</span><br><span class="line">        &#125;]</span><br></pre></td></tr></table></figure><h4 id="运行结果"><a class="markdownIt-Anchor" href="#运行结果"></a> 运行结果</h4><p><img src="https://s2.ax1x.com/2020/01/31/18SxbR.png" alt="运行结果" /></p><h4 id="python源码"><a class="markdownIt-Anchor" href="#python源码"></a> python源码</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># coding=utf-8</span><br><span class="line"># 操作图片模块</span><br><span class="line">from PIL import Image</span><br><span class="line"># 第三方OCR调用（识别率不高）</span><br><span class="line">import pytesseract</span><br><span class="line"># 范围随机模块</span><br><span class="line">import random</span><br><span class="line"># 操作系统模块</span><br><span class="line">import os</span><br><span class="line"># 矩阵计算与tensorflow（深度学习框架）</span><br><span class="line">import numpy as np</span><br><span class="line">import tensorflow as tf</span><br><span class="line"># 爬虫模拟网页请求模块</span><br><span class="line">import requests</span><br><span class="line"># 调用系统浏览器</span><br><span class="line">import webbrowser</span><br><span class="line"># 爬取html指定内容</span><br><span class="line">from bs4 import BeautifulSoup</span><br><span class="line"># 正则模块</span><br><span class="line">import re</span><br><span class="line"># smtp邮箱</span><br><span class="line">import smtplib</span><br><span class="line">from email.mime.text import MIMEText</span><br><span class="line">from email.utils import formataddr</span><br><span class="line"># 时间模块，用于延迟</span><br><span class="line">import time</span><br><span class="line"># 下载图片模块</span><br><span class="line">from typing import Any</span><br><span class="line">from urllib.request import urlretrieve</span><br><span class="line"># TF_CPP_MIN_LOG_LEVEL默认值为 0 (显示所有logs)</span><br><span class="line"># 设置为 1 隐藏 INFO logs, 2 额外隐藏WARNING logs</span><br><span class="line"># 设置为3所有 ERROR logs也不显示</span><br><span class="line">os.environ[&#x27;TF_CPP_MIN_LOG_LEVEL&#x27;] = &#x27;2&#x27;</span><br><span class="line"></span><br><span class="line"># 全局变量</span><br><span class="line">IMAGE_HEIGHT = 22  # 验证码图片高度</span><br><span class="line">IMAGE_WIDTH = 68   # 验证码图片宽度</span><br><span class="line">MAX_CAPTCHA = 4    # 验证码的位数</span><br><span class="line">CHAR_SET_LEN = 36  # 验证码的字符有多少种</span><br><span class="line"># 验证码图片网址</span><br><span class="line">IMAGE_URL = &quot;http://jwfw1.sdjzu.edu.cn/ssfw/jwcaptcha.do&quot;</span><br><span class="line"># 下载验证码图片的数量</span><br><span class="line">VERIFICATION_CODE_NUMBER = 10</span><br><span class="line"># 验证码文件夹与文件绝对存储路径</span><br><span class="line">VERIFICATION_CODE_PATH1 = os.path.dirname(__file__) + &#x27;/verification_code_images/&#x27;</span><br><span class="line">VERIFICATION_CODE_PATH2 = os.path.dirname(__file__) + &#x27;/verification_code_images/&#123;name&#125;.png&#x27;</span><br><span class="line"># 训练数据集绝对存储路径</span><br><span class="line">VERIFICATION_CODE_TRAINING_PATH = os.path.dirname(__file__) + &#x27;/verification_code_training_images/&#x27;</span><br><span class="line"># placeholder 是 Tensorflow 中的占位符，暂时储存变量 X Y ,keep_prob是dropout层保留概率</span><br><span class="line">X = tf.placeholder(tf.float32, [None, IMAGE_HEIGHT*IMAGE_WIDTH])</span><br><span class="line">Y = tf.placeholder(tf.float32, [None, MAX_CAPTCHA*CHAR_SET_LEN])</span><br><span class="line">keep_prob = tf.placeholder(tf.float32)</span><br><span class="line"># 邮箱信息</span><br><span class="line">SENDER = &#x27;********&#x27;</span><br><span class="line">PASSWORD = &#x27;********&#x27;</span><br><span class="line"># 用户信息</span><br><span class="line">info = [&#123;</span><br><span class="line">        &#x27;account&#x27;: &#x27;********&#x27;,</span><br><span class="line">        &#x27;password&#x27;: &#x27;********&#x27;,</span><br><span class="line">        &#x27;email&#x27;: &#x27;********&#x27;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">        &#x27;account&#x27;: &#x27;********&#x27;,</span><br><span class="line">        &#x27;password&#x27;: &#x27;********&#x27;,</span><br><span class="line">        &#x27;email&#x27;: &#x27;********&#x27;</span><br><span class="line">        &#125;]</span><br><span class="line"># String1为原始成绩,String2为最新成绩。创建方式为这样append防止默认copy（以免浅拷贝）</span><br><span class="line">String1 = [[] for copy in range(len(info))]</span><br><span class="line">String2 = [[] for copy in range(len(info))]</span><br><span class="line"># 训练集所有图片list与</span><br><span class="line">all_images = os.listdir(VERIFICATION_CODE_TRAINING_PATH)</span><br><span class="line">all_images_size = len(all_images)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 下载验证码图片安装序号存储图片</span><br><span class="line">def download_verification_code():</span><br><span class="line">    # 创建文件夹如果没有</span><br><span class="line">    os.makedirs(VERIFICATION_CODE_PATH1, exist_ok=True)</span><br><span class="line">    for i in range(0, VERIFICATION_CODE_NUMBER):</span><br><span class="line">        urlretrieve(IMAGE_URL, VERIFICATION_CODE_PATH2.format(name=i))</span><br><span class="line">    print(&quot;成功下载%s张图片！&quot; % VERIFICATION_CODE_NUMBER)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 调用pytesseract整体识别验证码(识别率低)</span><br><span class="line">def pytesseract_verification_code():</span><br><span class="line">    for i in range(0, VERIFICATION_CODE_NUMBER):</span><br><span class="line">        img = Image.open(VERIFICATION_CODE_PATH2.format(name=i))</span><br><span class="line">        char = pytesseract.image_to_string(img, config=&#x27;--psm 8&#x27;)</span><br><span class="line">        # psm 各个值的说明</span><br><span class="line">        # 0：定向脚本监测（OSD）</span><br><span class="line">        # 1： 使用OSD自动分页</span><br><span class="line">        # 2 ：自动分页，但是不使用OSD或OCR（Optical Character Recognition，光学字符识别）</span><br><span class="line">        # 3 ：全自动分页，但是没有使用OSD（默认）</span><br><span class="line">        # 4 ：假设可变大小的一个文本列。</span><br><span class="line">        # 5 ：假设垂直对齐文本的单个统一块。</span><br><span class="line">        # 6 ：假设一个统一的文本块。</span><br><span class="line">        # 7 ：将图像视为单个文本行。</span><br><span class="line">        # 8 ：将图像视为单个词。</span><br><span class="line">        # 9 ：将图像视为圆中的单个词。</span><br><span class="line">        # 10 ：将图像视为单个字符</span><br><span class="line">        print(i, char)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 二值化分割验证码再调用pytesseract识别验证码(识别率有所提高)</span><br><span class="line">def pytesseract_devide_verification_code():</span><br><span class="line">    # 随机读取图片并灰度化</span><br><span class="line">    random_number = random.randint(0, VERIFICATION_CODE_NUMBER)</span><br><span class="line">    img = Image.open(VERIFICATION_CODE_PATH2.format(name=random_number)).convert(&#x27;L&#x27;)</span><br><span class="line">    # 二值化:173为我的验证图片有较好的效果的值，不同图片的值不一样，请根据自己验证码图片设置相应的值</span><br><span class="line">    img = img.point(lambda x: 255 if x &gt; 173 else 0)</span><br><span class="line">    # 分离:crop函数带的参数为(起始点的横坐标，起始点的纵坐标，宽度，高度）</span><br><span class="line">    img1 = img.crop((0 * IMAGE_WIDTH / MAX_CAPTCHA, 0, 1 * IMAGE_WIDTH / MAX_CAPTCHA, IMAGE_HEIGHT))</span><br><span class="line">    img2 = img.crop((1 * IMAGE_WIDTH / MAX_CAPTCHA, 0, 2 * IMAGE_WIDTH / MAX_CAPTCHA, IMAGE_HEIGHT))</span><br><span class="line">    img3 = img.crop((2 * IMAGE_WIDTH / MAX_CAPTCHA, 0, 3 * IMAGE_WIDTH / MAX_CAPTCHA, IMAGE_HEIGHT))</span><br><span class="line">    img4 = img.crop((3 * IMAGE_WIDTH / MAX_CAPTCHA, 0, 4 * IMAGE_WIDTH / MAX_CAPTCHA, IMAGE_HEIGHT))</span><br><span class="line">    # 调用pytesseract识别验证码</span><br><span class="line">    char = pytesseract.image_to_string(img, config=&#x27;--psm 8&#x27;)</span><br><span class="line">    char1 = pytesseract.image_to_string(img1, config=&#x27;--psm 10&#x27;)</span><br><span class="line">    char2 = pytesseract.image_to_string(img2, config=&#x27;--psm 10&#x27;)</span><br><span class="line">    char3 = pytesseract.image_to_string(img3, config=&#x27;--psm 10&#x27;)</span><br><span class="line">    char4 = pytesseract.image_to_string(img4, config=&#x27;--psm 10&#x27;)</span><br><span class="line">    print(char)</span><br><span class="line">    print(char1)</span><br><span class="line">    print(char2)</span><br><span class="line">    print(char3)</span><br><span class="line">    print(char4)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">################################################################</span><br><span class="line">### 通过tensorflow的CNN(卷积神经网络深度学习后识别验证码,识别率贼高####</span><br><span class="line">################################################################</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 获取验证码名字和图片（训练数据集）</span><br><span class="line">def get_name_and_image():</span><br><span class="line">    # 获取数据集下的所有图片的数组all_images</span><br><span class="line">    # all_images = os.listdir(VERIFICATION_CODE_TRAINING_PATH)</span><br><span class="line">    random_image = random.randint(0, all_images_size - 1)</span><br><span class="line">    # print (all_images_size)</span><br><span class="line">    base = os.path.basename(VERIFICATION_CODE_TRAINING_PATH + all_images[random_image])  # 有扩展名</span><br><span class="line">    name = os.path.splitext(base)[0]  # 无扩展名</span><br><span class="line">    image = Image.open(VERIFICATION_CODE_TRAINING_PATH + all_images[random_image])</span><br><span class="line">    image = np.array(image)</span><br><span class="line">    return name, image</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 验证码名字转变成向量: 不同位数的需要重写这个函数,函数里的数字为ASCII码</span><br><span class="line">def name2vec(name):</span><br><span class="line">    vector = np.zeros(MAX_CAPTCHA*CHAR_SET_LEN)</span><br><span class="line">    for i, c in enumerate(name):</span><br><span class="line">        if ord(c) &lt; 58:</span><br><span class="line">            idx = i * 36 + ord(c)-48</span><br><span class="line">            vector[idx] = 1</span><br><span class="line">        else:</span><br><span class="line">            idx = i * 36 + ord(c) - 87</span><br><span class="line">            vector[idx] = 1</span><br><span class="line">    return vector</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 向量转名字:注释部分是 最开始的向量 转 名字</span><br><span class="line"># def vec2name(vec):</span><br><span class="line">#     name = []</span><br><span class="line">#     for i, c in enumerate(vec):</span><br><span class="line">#         if c == 1.0:</span><br><span class="line">#             name.append(i)</span><br><span class="line">#     for i in range(0, 4):</span><br><span class="line">#         if name[i] % 36 &lt; 10:</span><br><span class="line">#             name[i] = chr(name[i] % 36 + 48)</span><br><span class="line">#         else:</span><br><span class="line">#             name[i] = chr(name[i] % 36 + 87)</span><br><span class="line">#     return &quot;&quot;.join(name)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 向量转名字: 训练是不用到这个函数，训练完成用这个函数得到最终结果</span><br><span class="line">def vec2name(vec):</span><br><span class="line">    name = []</span><br><span class="line">    for i in vec:</span><br><span class="line">        if i &lt; 10:</span><br><span class="line">            a = chr(i + 48)</span><br><span class="line">            name.append(a)</span><br><span class="line">        else:</span><br><span class="line">            a = chr(i + 87)</span><br><span class="line">            name.append(a)</span><br><span class="line">    return &quot;&quot;.join(name)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 采样函数:默认一次采集64张验证码作为一次训练</span><br><span class="line"># 需要注意通过get_name_and_image()函数获得的image是一个含布尔值的矩阵</span><br><span class="line"># 在这里通过1*(image.flatten())函数转变成只含0和1的1行114*450列的矩阵</span><br><span class="line">def get_next_batch(batch_size=64):</span><br><span class="line">    batch_x = np.zeros([batch_size, IMAGE_HEIGHT*IMAGE_WIDTH])</span><br><span class="line">    batch_y = np.zeros([batch_size, MAX_CAPTCHA*CHAR_SET_LEN])</span><br><span class="line"></span><br><span class="line">    for i in range(batch_size):</span><br><span class="line">        name, image = get_name_and_image()</span><br><span class="line">        batch_x[i, :] = 1*(image.flatten())</span><br><span class="line">        batch_y[i, :] = name2vec(name)</span><br><span class="line">    return batch_x, batch_y</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 定义CNN(卷积神经网络):三个卷积层卷积神经网络结构</span><br><span class="line"># 采用3个卷积层加1个全连接层的结构，在每个卷积层中都选用2*2的最大池化层和dropout层，卷积核尺寸选择5*5。，</span><br><span class="line"># 我们的图片已经经过了3层池化层，也就是长宽都压缩了8倍(各自取整为3X9)</span><br><span class="line">def crack_captcha_cnn(w_alpha=0.01, b_alpha=0.1):</span><br><span class="line">    x = tf.reshape(X, shape=[-1, IMAGE_HEIGHT, IMAGE_WIDTH, 1])</span><br><span class="line">    # 3个卷积层</span><br><span class="line">    w_c1 = tf.Variable(w_alpha * tf.random_normal([5, 5, 1, 32]))</span><br><span class="line">    b_c1 = tf.Variable(b_alpha * tf.random_normal([32]))</span><br><span class="line">    conv1 = tf.nn.relu(tf.nn.bias_add(tf.nn.conv2d(x, w_c1, strides=[1, 1, 1, 1], padding=&#x27;SAME&#x27;), b_c1))</span><br><span class="line">    conv1 = tf.nn.max_pool(conv1, ksize=[1, 2, 2, 1], strides=[1, 2, 2, 1], padding=&#x27;SAME&#x27;)</span><br><span class="line">    conv1 = tf.nn.dropout(conv1, keep_prob)</span><br><span class="line"></span><br><span class="line">    w_c2 = tf.Variable(w_alpha * tf.random_normal([5, 5, 32, 64]))</span><br><span class="line">    b_c2 = tf.Variable(b_alpha * tf.random_normal([64]))</span><br><span class="line">    conv2 = tf.nn.relu(tf.nn.bias_add(tf.nn.conv2d(conv1, w_c2, strides=[1, 1, 1, 1], padding=&#x27;SAME&#x27;), b_c2))</span><br><span class="line">    conv2 = tf.nn.max_pool(conv2, ksize=[1, 2, 2, 1], strides=[1, 2, 2, 1], padding=&#x27;SAME&#x27;)</span><br><span class="line">    conv2 = tf.nn.dropout(conv2, keep_prob)</span><br><span class="line"></span><br><span class="line">    w_c3 = tf.Variable(w_alpha * tf.random_normal([5, 5, 64, 64]))</span><br><span class="line">    b_c3 = tf.Variable(b_alpha * tf.random_normal([64]))</span><br><span class="line">    conv3 = tf.nn.relu(tf.nn.bias_add(tf.nn.conv2d(conv2, w_c3, strides=[1, 1, 1, 1], padding=&#x27;SAME&#x27;), b_c3))</span><br><span class="line">    conv3 = tf.nn.max_pool(conv3, ksize=[1, 2, 2, 1], strides=[1, 2, 2, 1], padding=&#x27;SAME&#x27;)</span><br><span class="line">    conv3 = tf.nn.dropout(conv3, keep_prob)</span><br><span class="line"></span><br><span class="line">    # 1个全连接层</span><br><span class="line">    w_d = tf.Variable(w_alpha * tf.random_normal([3*9*64, 1024]))</span><br><span class="line">    b_d = tf.Variable(b_alpha * tf.random_normal([1024]))</span><br><span class="line">    dense = tf.reshape(conv3, [-1, w_d.get_shape().as_list()[0]])</span><br><span class="line">    dense = tf.nn.relu(tf.add(tf.matmul(dense, w_d), b_d))</span><br><span class="line">    dense = tf.nn.dropout(dense, keep_prob)</span><br><span class="line"></span><br><span class="line">    w_out = tf.Variable(w_alpha * tf.random_normal([1024, MAX_CAPTCHA * CHAR_SET_LEN]))</span><br><span class="line">    b_out = tf.Variable(b_alpha * tf.random_normal([MAX_CAPTCHA * CHAR_SET_LEN]))</span><br><span class="line">    out = tf.add(tf.matmul(dense, w_out), b_out)</span><br><span class="line">    return out</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 训练函数：选择sigmoid_cross_entropy_with_logits()交叉熵来比较loss</span><br><span class="line"># 用adam优化器来优化</span><br><span class="line"># keep_prob = 0.3，控制着过拟合</span><br><span class="line">def train_crack_captcha_cnn():</span><br><span class="line">    output = crack_captcha_cnn()</span><br><span class="line">    loss = tf.reduce_mean(tf.nn.sigmoid_cross_entropy_with_logits(logits=output, labels=Y))</span><br><span class="line">    optimizer = tf.train.AdamOptimizer(learning_rate=0.0001).minimize(loss)</span><br><span class="line">    predict = tf.reshape(output, [-1, MAX_CAPTCHA, CHAR_SET_LEN])</span><br><span class="line">    max_idx_p = tf.argmax(predict, 2)</span><br><span class="line">    max_idx_l = tf.argmax(tf.reshape(Y, [-1, MAX_CAPTCHA, CHAR_SET_LEN]), 2)</span><br><span class="line">    correct_pred = tf.equal(max_idx_p, max_idx_l)</span><br><span class="line">    accuracy = tf.reduce_mean(tf.cast(correct_pred, tf.float32))</span><br><span class="line">    saver = tf.train.Saver()</span><br><span class="line">    with tf.Session() as sess:</span><br><span class="line">        sess.run(tf.global_variables_initializer())</span><br><span class="line">        step = 0</span><br><span class="line">        while True:</span><br><span class="line">            batch_x, batch_y = get_next_batch(256)</span><br><span class="line">            _, loss_ = sess.run([optimizer, loss], feed_dict=&#123;X: batch_x, Y: batch_y, keep_prob: 0.2&#125;)</span><br><span class="line">            print(step, loss_)</span><br><span class="line">            # 每100 step计算一次准确率</span><br><span class="line">            if step % 1000 == 0:</span><br><span class="line">                batch_x_test, batch_y_test = get_next_batch(1000)</span><br><span class="line">                acc = sess.run(accuracy, feed_dict=&#123;X: batch_x_test, Y: batch_y_test, keep_prob: 1.&#125;)</span><br><span class="line">                print(step, acc)</span><br><span class="line">                # 如果准确率大于99%,保存模型,完成训练</span><br><span class="line">                if acc &gt; 0.999:</span><br><span class="line">                    saver.save(sess, &quot;./crack_capcha.model&quot;, global_step=step)</span><br><span class="line">                    break</span><br><span class="line">            step += 1</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># train_crack_captcha_cnn()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 训练完成后,注释train_crack_captcha_cnn()，取消下面的注释，开始预测，注意更改预测集目录</span><br><span class="line"># def crack_captcha():</span><br><span class="line">#     output = crack_captcha_cnn()</span><br><span class="line">#</span><br><span class="line">#     saver = tf.train.Saver()</span><br><span class="line">#     with tf.Session() as sess:</span><br><span class="line">#         saver.restore(sess, tf.train.latest_checkpoint(&#x27;.&#x27;))</span><br><span class="line">#         n = 1</span><br><span class="line">#         while n &lt;= 10:</span><br><span class="line">#             text, verification_code_training_images = get_name_and_image()</span><br><span class="line">#             verification_code_training_images = 1 * (verification_code_training_images.flatten())</span><br><span class="line">#             predict = tf.argmax(tf.reshape(output, [-1, MAX_CAPTCHA, CHAR_SET_LEN]), 2)</span><br><span class="line">#             text_list = sess.run(predict, feed_dict=&#123;X: [verification_code_training_images], keep_prob: 1&#125;)</span><br><span class="line">#             vec = text_list[0].tolist()</span><br><span class="line">#             predict_text = vec2name(vec)</span><br><span class="line">#             print(&quot;正确: &#123;&#125;  预测: &#123;&#125;&quot;.format(text, predict_text))</span><br><span class="line">#             n += 1</span><br><span class="line">#</span><br><span class="line">#</span><br><span class="line"># crack_captcha()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def captcha():</span><br><span class="line">    output = crack_captcha_cnn()</span><br><span class="line">    saver = tf.train.Saver()</span><br><span class="line">    with tf.Session() as sess:</span><br><span class="line">        saver.restore(sess, tf.train.latest_checkpoint(&#x27;.&#x27;))</span><br><span class="line">        first_time = True</span><br><span class="line"></span><br><span class="line">        while True:</span><br><span class="line">            users_number = 0</span><br><span class="line">            for information in info:</span><br><span class="line">                while True:</span><br><span class="line">                    session = requests.Session()</span><br><span class="line">                    headers = &#123;&quot;User-Agent&quot;: &quot;Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:39.0) Gecko/20100101 Firefox/39.0&quot;&#125;</span><br><span class="line">                    html = session.get(IMAGE_URL, headers=headers).content</span><br><span class="line">                    with open(&#x27;./test_captcha/test.png&#x27;, &#x27;wb&#x27;) as file:</span><br><span class="line">                        file.write(html)</span><br><span class="line">                    img = Image.open(&#x27;./test_captcha/test.png&#x27;).convert(&#x27;L&#x27;)</span><br><span class="line">                    # 二值化</span><br><span class="line">                    img = img.point(lambda x: 255 if x &gt; 173 else 0)</span><br><span class="line">                    img = np.array(img)</span><br><span class="line">                    img = 1 * (img.flatten())</span><br><span class="line">                    predict = tf.argmax(tf.reshape(output, [-1, MAX_CAPTCHA, CHAR_SET_LEN]), 2)</span><br><span class="line">                    text_list = sess.run(predict, feed_dict=&#123;X: [img], keep_prob: 1&#125;)</span><br><span class="line">                    vec = text_list[0].tolist()</span><br><span class="line">                    # print(&quot;预测:&quot;, vec2name(vec))</span><br><span class="line"></span><br><span class="line">                    session.get(&#x27;http://jwfw1.sdjzu.edu.cn/ssfw/login.jsp&#x27;)</span><br><span class="line">                    data = &#123;&#x27;j_username&#x27;: information[&#x27;account&#x27;], &#x27;j_password&#x27;: information[&#x27;password&#x27;],</span><br><span class="line">                            &#x27;validateCode&#x27;: vec2name(vec)&#125;</span><br><span class="line">                    r = session.post(&#x27;http://jwfw1.sdjzu.edu.cn/ssfw/j_spring_ids_security_check&#x27;, data=data, headers=headers)</span><br><span class="line">                    if (re.search(r&#x27;校验码错误&#x27;, r.text, re.I | re.M)) is None:</span><br><span class="line">                        print(&quot;验证码正确通过！&quot;)</span><br><span class="line">                        n = session.get(</span><br><span class="line">                            &#x27;http://jwfw1.sdjzu.edu.cn/ssfw/jwnavmenu.do?menuItemWid=1E057E24ABAB4CAFE0540010E0235690&#x27;,</span><br><span class="line">                            headers=headers)</span><br><span class="line">                        soup = BeautifulSoup(n.content, features=&#x27;html.parser&#x27;)</span><br><span class="line">                        s = soup.select(&#x27;div[title=&quot;有效成绩&quot;] .t_con td[align=&quot;center&quot;]&#x27;)</span><br><span class="line">                        subjects_number = int(len(s) / 11)</span><br><span class="line">                        # print(&quot;科目数:&quot;, subjects_number)</span><br><span class="line">                        for i in range(0, subjects_number):</span><br><span class="line">                            # print(&#x27;序号:&#x27;, s[i * 11].get_text(strip=True))</span><br><span class="line">                            # print(&#x27;学年学期:&#x27;, s[i * 11 + 1].get_text( strip=True))</span><br><span class="line">                            # print(&#x27;课程号:&#x27;, s[i * 11 + 2].get_text(strip=True))</span><br><span class="line">                            # print(&#x27;课程名称:&#x27;, s[i * 11 + 3].get_text( strip=True))</span><br><span class="line">                            # print(&#x27;课程类别:&#x27;, s[i * 11 + 4].get_text(strip=True))</span><br><span class="line">                            # print(&#x27;任选课类别:&#x27;, s[i * 11 + 5].get_text(strip=True))</span><br><span class="line">                            # print(&#x27;课程性质:&#x27;, s[i * 11 + 6].get_text(strip=True))</span><br><span class="line">                            # print(&#x27;学分:&#x27;, s[i * 11 + 7].get_text(strip=True))</span><br><span class="line">                            # print(&#x27;成绩:&#x27;, s[i * 11 + 8].get_text(strip=True))</span><br><span class="line">                            # print(&#x27;****************&#x27;)</span><br><span class="line">                            ss = &#x27;&#123;&#125; &#123;&#125; 成绩: &#123;&#125;&#x27;.format(s[i * 11].get_text(strip=True), s[i * 11 + 3].get_text(strip=True),</span><br><span class="line">                                                       s[i * 11 + 8].get_text(strip=True))</span><br><span class="line">                            if first_time:</span><br><span class="line">                                String1[users_number].append(ss)</span><br><span class="line">                            else:</span><br><span class="line">                                String2[users_number].append(ss)</span><br><span class="line">                        # 发送邮件</span><br><span class="line">                        my_user = &#x27;%s&#x27; % information[&#x27;email&#x27;]</span><br><span class="line">                        sss = &quot;&quot;.join(list(set(String2[users_number]).difference(set(String1[users_number]))))  # b中有而a中没有的</span><br><span class="line">                        ret = True</span><br><span class="line">                        if first_time:</span><br><span class="line">                            text = &#x27;\n&#x27;.join(String1[users_number])</span><br><span class="line"></span><br><span class="line">                            try:</span><br><span class="line">                                msg = MIMEText(text, &#x27;plain&#x27;, &#x27;utf-8&#x27;)</span><br><span class="line">                                msg[&#x27;From&#x27;] = formataddr([&quot;weijiajin&quot;, SENDER])  # 括号里的对应发件人邮箱昵称、发件人邮箱账号</span><br><span class="line">                                msg[&#x27;To&#x27;] = formataddr([&quot;亲～:&quot;, my_user])  # 括号里的对应收件人邮箱昵称、收件人邮箱账号</span><br><span class="line">                                msg[&#x27;Subject&#x27;] = &quot;全部成绩！好好学习！&quot;  # 邮件的主题，也可以说是标题</span><br><span class="line">                                server = smtplib.SMTP_SSL(&quot;smtp.qq.com&quot;, 465)  # 发件人邮箱中的SMTP服务器，端口是465</span><br><span class="line">                                server.login(SENDER, PASSWORD)  # 括号中对应的是发件人邮箱账号、邮箱密码</span><br><span class="line">                                server.sendmail(SENDER, [my_user, ], msg.as_string())  # 括号中对应的是发件人邮箱账号、收件人邮箱账号、发送邮件</span><br><span class="line">                                server.quit()  # 关闭连接</span><br><span class="line">                            except Exception:  # 如果 try 中的语句没有执行，则会执行下面的 ret=False</span><br><span class="line">                                ret = False</span><br><span class="line">                            if ret:</span><br><span class="line">                                print(&quot;发送邮件成功！&quot;)</span><br><span class="line">                            else:</span><br><span class="line">                                print(&quot;发送邮件失败！&quot;)</span><br><span class="line">                            String2[users_number].clear()</span><br><span class="line">                            users_number = + 1</span><br><span class="line">                            break</span><br><span class="line">                        elif sss == &quot;&quot;:</span><br><span class="line">                            print(&quot;没有最新成绩！不发送邮件！&quot;)</span><br><span class="line">                            String2[users_number].clear()</span><br><span class="line">                            users_number = + 1</span><br><span class="line">                            break</span><br><span class="line">                        elif sss != &quot;&quot;:</span><br><span class="line">                            text = &#x27;\n&#x27;.join(String2[users_number])</span><br><span class="line">                            title = &quot;&quot;.join(list(set(String2[users_number]).difference(set(String1[users_number]))))</span><br><span class="line">                            try:</span><br><span class="line">                                msg = MIMEText(text, &#x27;plain&#x27;, &#x27;utf-8&#x27;)</span><br><span class="line">                                msg[&#x27;From&#x27;] = formataddr([&quot;weijiajin&quot;, SENDER])  # 括号里的对应发件人邮箱昵称、发件人邮箱账号</span><br><span class="line">                                msg[&#x27;To&#x27;] = formataddr([&quot;亲～&quot;, my_user])  # 括号里的对应收件人邮箱昵称、收件人邮箱账号</span><br><span class="line">                                msg[&#x27;Subject&#x27;] = &quot;最新成绩出来啦～&quot; + title  # 邮件的主题，也可以说是标题</span><br><span class="line">                                server = smtplib.SMTP_SSL(&quot;smtp.qq.com&quot;, 465)  # 发件人邮箱中的SMTP服务器，端口是465</span><br><span class="line">                                server.login(SENDER, my_pass)  # 括号中对应的是发件人邮箱账号、邮箱密码</span><br><span class="line">                                server.sendmail(SENDER, [my_user, ], msg.as_string())  # 括号中对应的是发件人邮箱账号、收件人邮箱账号、发送邮件</span><br><span class="line">                                server.quit()  # 关闭连接</span><br><span class="line">                            except Exception:  # 如果 try 中的语句没有执行，则会执行下面的 ret=False</span><br><span class="line">                                ret = False</span><br><span class="line">                            if ret:</span><br><span class="line">                                print(&quot;发送邮件成功！&quot;)</span><br><span class="line"></span><br><span class="line">                            else:</span><br><span class="line">                                print(&quot;发送邮件失败！&quot;)</span><br><span class="line">                            String1[users_number].clear()</span><br><span class="line">                            String1[users_number] = String2[users_number]</span><br><span class="line">                            String2[users_number].clear()</span><br><span class="line">                            users_number = + 1</span><br><span class="line">                            break</span><br><span class="line">                        time.sleep(300)</span><br><span class="line">                    else:</span><br><span class="line">                        print(&quot;校验码错误！重新尝试中......&quot;)</span><br><span class="line"></span><br><span class="line">            first_time = False</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def auto_download_train_images():</span><br><span class="line">    output = crack_captcha_cnn()</span><br><span class="line">    saver = tf.train.Saver()</span><br><span class="line">    with tf.Session() as sess:</span><br><span class="line">        saver.restore(sess, tf.train.latest_checkpoint(&#x27;.&#x27;))</span><br><span class="line">        times1 = 0</span><br><span class="line">        times2 = 0</span><br><span class="line"></span><br><span class="line">        while True:</span><br><span class="line">            session = requests.Session()</span><br><span class="line">            headers = &#123;&quot;User-Agent&quot;: &quot;Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:39.0) Gecko/20100101 Firefox/39.0&quot;&#125;</span><br><span class="line">            html = session.get(IMAGE_URL, headers=headers).content</span><br><span class="line">            with open(&#x27;./test_captcha/test.png&#x27;, &#x27;wb&#x27;) as file:</span><br><span class="line">                file.write(html)</span><br><span class="line">            img = Image.open(&#x27;./test_captcha/test.png&#x27;).convert(&#x27;L&#x27;)</span><br><span class="line">            # 二值化</span><br><span class="line">            img = img.point(lambda x: 255 if x &gt; 173 else 0)</span><br><span class="line">            img1 = np.array(img)</span><br><span class="line">            img1 = 1 * (img1.flatten())</span><br><span class="line">            predict = tf.argmax(tf.reshape(output, [-1, MAX_CAPTCHA, CHAR_SET_LEN]), 2)</span><br><span class="line">            text_list = sess.run(predict, feed_dict=&#123;X: [img1], keep_prob: 1&#125;)</span><br><span class="line">            vec = text_list[0].tolist()</span><br><span class="line">            # print(&quot;预测:&quot;, vec2name(vec))</span><br><span class="line">            session.get(&#x27;http://jwfw1.sdjzu.edu.cn/ssfw/login.jsp&#x27;)</span><br><span class="line">            data = &#123;&#x27;j_username&#x27;: &#x27;201611101122&#x27;, &#x27;j_password&#x27;: &#x27;174519&#x27;,</span><br><span class="line">                    &#x27;validateCode&#x27;: vec2name(vec)&#125;</span><br><span class="line">            r = session.post(&#x27;http://jwfw1.sdjzu.edu.cn/ssfw/j_spring_ids_security_check&#x27;, data=data, headers=headers)</span><br><span class="line">            if (re.search(r&#x27;校验码错误&#x27;, r.text, re.I | re.M)) is None:</span><br><span class="line">                # print(&quot;验证码正确通过！&quot;)</span><br><span class="line">                # print(times1)</span><br><span class="line">                image_name = &#x27;&#123;image_name&#125;.png&#x27;</span><br><span class="line">                img.save(os.path.join(&#x27;./verification_code_training_images/&#x27;, image_name.format(image_name=vec2name(vec))))</span><br><span class="line">                times1 = times1 + 1</span><br><span class="line">            else:</span><br><span class="line">                # print(&quot;校验码错误！&quot;)</span><br><span class="line">                # print(times2)</span><br><span class="line">                image_name = &#x27;&#123;image_name&#125;.png&#x27;</span><br><span class="line">                img.save(os.path.join(&#x27;./error_images/&#x27;, image_name.format(image_name=vec2name(vec))))</span><br><span class="line">                times2 = times2 + 1</span><br><span class="line">            rate = times1/(times2+times1)</span><br><span class="line">            print(&quot;总次数: % s&quot; % (times2+times1)+&quot;正确率：% s &quot; % rate)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">captcha()</span><br><span class="line"># auto_download_train_images()</span><br></pre></td></tr></table></figure><h4 id="todo"><a class="markdownIt-Anchor" href="#todo"></a> TODO：</h4><ul><li>增加绩点计算公式</li><li>集成于微信小程序或者微信公众号</li><li>优化代码</li></ul><h4 id="参考资料"><a class="markdownIt-Anchor" href="#参考资料"></a> 参考资料</h4><ul><li><p><a href="https://morvanzhou.github.io/">https://morvanzhou.github.io/</a></p></li><li><p><a href="https://www.iswin.org/2016/10/15/Simple-CAPTCHA-Recognition-with-Machine-Learning/">https://www.iswin.org/2016/10/15/Simple-CAPTCHA-Recognition-with-Machine-Learning/</a></p></li><li><p><a href="https://finthon.com/python-tensorflow-cnn-captcha/">https://finthon.com/python-tensorflow-cnn-captcha/</a></p></li><li><p><a href="http://blog.topspeedsnail.com/archives/10858">http://blog.topspeedsnail.com/archives/10858</a></p></li></ul>]]></content>
    
    
    <summary type="html">程序自动化操作，简化成绩查询过程，节省时间，提高效率。</summary>
    
    
    
    <category term="折腾" scheme="https://guyinga.top/categories/%E6%8A%98%E8%85%BE/"/>
    
    
    <category term="tensorflow" scheme="https://guyinga.top/tags/tensorflow/"/>
    
    <category term="python" scheme="https://guyinga.top/tags/python/"/>
    
  </entry>
  
</feed>
